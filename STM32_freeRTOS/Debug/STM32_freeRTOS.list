
STM32_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  080038e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000122c  20000008  080038f0  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001234  080038f0  00021234  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eee6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003a53  00000000  00000000  0003ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b31d  00000000  00000000  00042971  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f80  00000000  00000000  0004dc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012a0  00000000  00000000  0004ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000084e6  00000000  00000000  0004feb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006312  00000000  00000000  00058396  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e6a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c18  00000000  00000000  0005e724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037f4 	.word	0x080037f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	080037f4 	.word	0x080037f4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_Init+0x20>)
{
 80004e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	6813      	ldr	r3, [r2, #0]
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f817 	bl	8000520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f003 f8bc 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f003 f850 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80004fc:	2000      	movs	r0, #0
 80004fe:	bd08      	pop	{r3, pc}
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000504:	4a02      	ldr	r2, [pc, #8]	; (8000510 <HAL_IncTick+0xc>)
 8000506:	6813      	ldr	r3, [r2, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	6013      	str	r3, [r2, #0]
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20001170 	.word	0x20001170

08000514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000514:	4b01      	ldr	r3, [pc, #4]	; (800051c <HAL_GetTick+0x8>)
 8000516:	6818      	ldr	r0, [r3, #0]
}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20001170 	.word	0x20001170

08000520 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000522:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000524:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000528:	041b      	lsls	r3, r3, #16
 800052a:	0c1b      	lsrs	r3, r3, #16
 800052c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000530:	0200      	lsls	r0, r0, #8
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000536:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800053a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800053c:	60d3      	str	r3, [r2, #12]
 800053e:	4770      	bx	lr
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	68dc      	ldr	r4, [r3, #12]
 800054a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800054e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000552:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000554:	2b04      	cmp	r3, #4
 8000556:	bf28      	it	cs
 8000558:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055c:	f04f 0501 	mov.w	r5, #1
 8000560:	fa05 f303 	lsl.w	r3, r5, r3
 8000564:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000568:	bf8c      	ite	hi
 800056a:	3c03      	subhi	r4, #3
 800056c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056e:	4019      	ands	r1, r3
 8000570:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000572:	fa05 f404 	lsl.w	r4, r5, r4
 8000576:	3c01      	subs	r4, #1
 8000578:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800057a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	ea42 0201 	orr.w	r2, r2, r1
 8000580:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000584:	bfaf      	iteee	ge
 8000586:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058a:	f000 000f 	andlt.w	r0, r0, #15
 800058e:	4b06      	ldrlt	r3, [pc, #24]	; (80005a8 <HAL_NVIC_SetPriority+0x64>)
 8000590:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000592:	bfa5      	ittet	ge
 8000594:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000598:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00
 80005a8:	e000ed14 	.word	0xe000ed14

080005ac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005ac:	0942      	lsrs	r2, r0, #5
 80005ae:	2301      	movs	r3, #1
 80005b0:	f000 001f 	and.w	r0, r0, #31
 80005b4:	fa03 f000 	lsl.w	r0, r3, r0
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005be:	4770      	bx	lr
 80005c0:	e000e100 	.word	0xe000e100

080005c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	3801      	subs	r0, #1
 80005c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ca:	d20a      	bcs.n	80005e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	21f0      	movs	r1, #240	; 0xf0
 80005d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e010 	.word	0xe000e010
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005f2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005f4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005f6:	bf0c      	ite	eq
 80005f8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005fc:	f022 0204 	bicne.w	r2, r2, #4
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	4770      	bx	lr
 8000604:	e000e010 	.word	0xe000e010

08000608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800060e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80007bc <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000614:	4c67      	ldr	r4, [pc, #412]	; (80007b4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000616:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8000618:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800061a:	9a01      	ldr	r2, [sp, #4]
 800061c:	40da      	lsrs	r2, r3
 800061e:	d102      	bne.n	8000626 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000620:	b005      	add	sp, #20
 8000622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000626:	2601      	movs	r6, #1
    if(iocurrent)
 8000628:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800062a:	409e      	lsls	r6, r3
    if(iocurrent)
 800062c:	ea12 0e06 	ands.w	lr, r2, r6
 8000630:	f000 80b1 	beq.w	8000796 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000634:	684a      	ldr	r2, [r1, #4]
 8000636:	f022 0710 	bic.w	r7, r2, #16
 800063a:	2f02      	cmp	r7, #2
 800063c:	d116      	bne.n	800066c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800063e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000642:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000646:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800064a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800064e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000652:	f04f 0c0f 	mov.w	ip, #15
 8000656:	fa0c fc0a 	lsl.w	ip, ip, sl
 800065a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800065e:	690d      	ldr	r5, [r1, #16]
 8000660:	fa05 f50a 	lsl.w	r5, r5, sl
 8000664:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000668:	f8c9 5020 	str.w	r5, [r9, #32]
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000670:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000672:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000676:	fa05 f50c 	lsl.w	r5, r5, ip
 800067a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800067c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000680:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000684:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000688:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800068a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000690:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000694:	d811      	bhi.n	80006ba <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000696:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000698:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800069c:	68cf      	ldr	r7, [r1, #12]
 800069e:	fa07 f70c 	lsl.w	r7, r7, ip
 80006a2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006a6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006a8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006aa:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006ae:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006b2:	409f      	lsls	r7, r3
 80006b4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006b8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006ba:	f1ba 0f03 	cmp.w	sl, #3
 80006be:	d107      	bne.n	80006d0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80006c0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80006c2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80006c6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80006ca:	409f      	lsls	r7, r3
 80006cc:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80006ce:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80006d0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80006d2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80006d4:	688e      	ldr	r6, [r1, #8]
 80006d6:	fa06 f60c 	lsl.w	r6, r6, ip
 80006da:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80006dc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006de:	00d5      	lsls	r5, r2, #3
 80006e0:	d559      	bpl.n	8000796 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006e6:	f045 0501 	orr.w	r5, r5, #1
 80006ea:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80006ee:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006f2:	f023 0603 	bic.w	r6, r3, #3
 80006f6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80006fa:	f005 0501 	and.w	r5, r5, #1
 80006fe:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000702:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000704:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800070a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800070c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000710:	270f      	movs	r7, #15
 8000712:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000716:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800071a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800071e:	d03c      	beq.n	800079a <HAL_GPIO_Init+0x192>
 8000720:	4d25      	ldr	r5, [pc, #148]	; (80007b8 <HAL_GPIO_Init+0x1b0>)
 8000722:	42a8      	cmp	r0, r5
 8000724:	d03b      	beq.n	800079e <HAL_GPIO_Init+0x196>
 8000726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072a:	42a8      	cmp	r0, r5
 800072c:	d039      	beq.n	80007a2 <HAL_GPIO_Init+0x19a>
 800072e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000732:	42a8      	cmp	r0, r5
 8000734:	d037      	beq.n	80007a6 <HAL_GPIO_Init+0x19e>
 8000736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073a:	42a8      	cmp	r0, r5
 800073c:	d035      	beq.n	80007aa <HAL_GPIO_Init+0x1a2>
 800073e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000742:	42a8      	cmp	r0, r5
 8000744:	d033      	beq.n	80007ae <HAL_GPIO_Init+0x1a6>
 8000746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074a:	42a8      	cmp	r0, r5
 800074c:	bf14      	ite	ne
 800074e:	2507      	movne	r5, #7
 8000750:	2506      	moveq	r5, #6
 8000752:	fa05 f50c 	lsl.w	r5, r5, ip
 8000756:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000758:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800075a:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800075c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000760:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000762:	bf54      	ite	pl
 8000764:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000766:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800076a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800076c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076e:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000770:	bf54      	ite	pl
 8000772:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000774:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000778:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800077a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077c:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 800077e:	bf54      	ite	pl
 8000780:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000782:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000786:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000788:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078a:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 800078c:	bf54      	ite	pl
 800078e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000790:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000794:	60e5      	str	r5, [r4, #12]
    position++;
 8000796:	3301      	adds	r3, #1
 8000798:	e73f      	b.n	800061a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800079a:	2500      	movs	r5, #0
 800079c:	e7d9      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 800079e:	2501      	movs	r5, #1
 80007a0:	e7d7      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007a2:	2502      	movs	r5, #2
 80007a4:	e7d5      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007a6:	2503      	movs	r5, #3
 80007a8:	e7d3      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007aa:	2504      	movs	r5, #4
 80007ac:	e7d1      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007ae:	2505      	movs	r5, #5
 80007b0:	e7cf      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007b2:	bf00      	nop
 80007b4:	40010400 	.word	0x40010400
 80007b8:	48000400 	.word	0x48000400
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c0:	b10a      	cbz	r2, 80007c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007c2:	6181      	str	r1, [r0, #24]
 80007c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007c6:	6281      	str	r1, [r0, #40]	; 0x28
 80007c8:	4770      	bx	lr

080007ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007ca:	6943      	ldr	r3, [r0, #20]
 80007cc:	4059      	eors	r1, r3
 80007ce:	6141      	str	r1, [r0, #20]
 80007d0:	4770      	bx	lr
	...

080007d4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <HAL_PWREx_GetVoltageRange+0xc>)
 80007d6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80007d8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40007000 	.word	0x40007000

080007e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007ec:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007f0:	d11a      	bne.n	8000828 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007f2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007f6:	d013      	beq.n	8000820 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80007fa:	4912      	ldr	r1, [pc, #72]	; (8000844 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000804:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	fbb2 f1f1 	udiv	r1, r2, r1
 800080e:	2232      	movs	r2, #50	; 0x32
 8000810:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000812:	b112      	cbz	r2, 800081a <HAL_PWREx_ControlVoltageScaling+0x36>
 8000814:	6959      	ldr	r1, [r3, #20]
 8000816:	0549      	lsls	r1, r1, #21
 8000818:	d404      	bmi.n	8000824 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	055b      	lsls	r3, r3, #21
 800081e:	d40d      	bmi.n	800083c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000820:	2000      	movs	r0, #0
 8000822:	4770      	bx	lr
        wait_loop_index--;
 8000824:	3a01      	subs	r2, #1
 8000826:	e7f4      	b.n	8000812 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000828:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800082c:	bf1f      	itttt	ne
 800082e:	681a      	ldrne	r2, [r3, #0]
 8000830:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000834:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000838:	601a      	strne	r2, [r3, #0]
 800083a:	e7f1      	b.n	8000820 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 800083c:	2003      	movs	r0, #3
}  
 800083e:	4770      	bx	lr
 8000840:	40007000 	.word	0x40007000
 8000844:	000f4240 	.word	0x000f4240
 8000848:	20000004 	.word	0x20000004

0800084c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800084c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800084e:	4d1e      	ldr	r5, [pc, #120]	; (80008c8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000850:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000852:	00da      	lsls	r2, r3, #3
{
 8000854:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000856:	d518      	bpl.n	800088a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000858:	f7ff ffbc 	bl	80007d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800085c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000860:	d123      	bne.n	80008aa <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000862:	2c80      	cmp	r4, #128	; 0x80
 8000864:	d929      	bls.n	80008ba <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000866:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000868:	bf8c      	ite	hi
 800086a:	2002      	movhi	r0, #2
 800086c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	f023 0307 	bic.w	r3, r3, #7
 8000876:	4303      	orrs	r3, r0
 8000878:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 800087a:	6813      	ldr	r3, [r2, #0]
 800087c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000880:	1a18      	subs	r0, r3, r0
 8000882:	bf18      	it	ne
 8000884:	2001      	movne	r0, #1
 8000886:	b003      	add	sp, #12
 8000888:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	65ab      	str	r3, [r5, #88]	; 0x58
 8000892:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800089c:	f7ff ff9a 	bl	80007d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80008a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008a6:	65ab      	str	r3, [r5, #88]	; 0x58
 80008a8:	e7d8      	b.n	800085c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80008aa:	2c80      	cmp	r4, #128	; 0x80
 80008ac:	d807      	bhi.n	80008be <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80008ae:	d008      	beq.n	80008c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80008b0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80008b4:	4258      	negs	r0, r3
 80008b6:	4158      	adcs	r0, r3
 80008b8:	e7d9      	b.n	800086e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80008ba:	2000      	movs	r0, #0
 80008bc:	e7d7      	b.n	800086e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80008be:	2003      	movs	r0, #3
 80008c0:	e7d5      	b.n	800086e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008c2:	2002      	movs	r0, #2
 80008c4:	e7d3      	b.n	800086e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <HAL_RCC_GetSysClockFreq+0xc0>)
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	f012 0f0c 	tst.w	r2, #12
{
 80008d8:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008da:	d009      	beq.n	80008f0 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008e2:	2a0c      	cmp	r2, #12
 80008e4:	d12d      	bne.n	8000942 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	f002 0203 	and.w	r2, r2, #3
 80008ec:	2a01      	cmp	r2, #1
 80008ee:	d128      	bne.n	8000942 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80008f0:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80008f2:	4928      	ldr	r1, [pc, #160]	; (8000994 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80008f4:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008f6:	bf55      	itete	pl
 80008f8:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008fc:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008fe:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000902:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8000906:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800090a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 800090c:	f011 0f0c 	tst.w	r1, #12
 8000910:	bf0c      	ite	eq
 8000912:	4610      	moveq	r0, r2
 8000914:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000916:	6899      	ldr	r1, [r3, #8]
 8000918:	f001 010c 	and.w	r1, r1, #12
 800091c:	290c      	cmp	r1, #12
 800091e:	d130      	bne.n	8000982 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000920:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000922:	68d8      	ldr	r0, [r3, #12]
 8000924:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000928:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800092a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800092e:	2802      	cmp	r0, #2
 8000930:	d019      	beq.n	8000966 <HAL_RCC_GetSysClockFreq+0x96>
 8000932:	2803      	cmp	r0, #3
 8000934:	d026      	beq.n	8000984 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000936:	fbb2 f2f1 	udiv	r2, r2, r1
 800093a:	68d8      	ldr	r0, [r3, #12]
 800093c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000940:	e017      	b.n	8000972 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	f002 020c 	and.w	r2, r2, #12
 8000948:	2a04      	cmp	r2, #4
 800094a:	d007      	beq.n	800095c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	f002 020c 	and.w	r2, r2, #12
 8000952:	2a08      	cmp	r2, #8
 8000954:	d104      	bne.n	8000960 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000956:	4810      	ldr	r0, [pc, #64]	; (8000998 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000958:	2200      	movs	r2, #0
 800095a:	e7dc      	b.n	8000916 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800095c:	480f      	ldr	r0, [pc, #60]	; (800099c <HAL_RCC_GetSysClockFreq+0xcc>)
 800095e:	e7fb      	b.n	8000958 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000960:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000962:	4602      	mov	r2, r0
 8000964:	e7d7      	b.n	8000916 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <HAL_RCC_GetSysClockFreq+0xcc>)
 800096a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800096e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000978:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800097a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800097c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800097e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000982:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	4804      	ldr	r0, [pc, #16]	; (8000998 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000988:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800098c:	e7ef      	b.n	800096e <HAL_RCC_GetSysClockFreq+0x9e>
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	080038a8 	.word	0x080038a8
 8000998:	007a1200 	.word	0x007a1200
 800099c:	00f42400 	.word	0x00f42400

080009a0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009a0:	6803      	ldr	r3, [r0, #0]
{
 80009a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80009a6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009a8:	06d8      	lsls	r0, r3, #27
 80009aa:	d53b      	bpl.n	8000a24 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80009ac:	4ca9      	ldr	r4, [pc, #676]	; (8000c54 <HAL_RCC_OscConfig+0x2b4>)
 80009ae:	68a3      	ldr	r3, [r4, #8]
 80009b0:	f013 0f0c 	tst.w	r3, #12
 80009b4:	d160      	bne.n	8000a78 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	0799      	lsls	r1, r3, #30
 80009ba:	d505      	bpl.n	80009c8 <HAL_RCC_OscConfig+0x28>
 80009bc:	69ab      	ldr	r3, [r5, #24]
 80009be:	b91b      	cbnz	r3, 80009c8 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80009c0:	2001      	movs	r0, #1
}
 80009c2:	b002      	add	sp, #8
 80009c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	6a28      	ldr	r0, [r5, #32]
 80009cc:	071a      	lsls	r2, r3, #28
 80009ce:	bf56      	itet	pl
 80009d0:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80009d4:	6823      	ldrmi	r3, [r4, #0]
 80009d6:	091b      	lsrpl	r3, r3, #4
 80009d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009dc:	4283      	cmp	r3, r0
 80009de:	d236      	bcs.n	8000a4e <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009e0:	f7ff ff34 	bl	800084c <RCC_SetFlashLatencyFromMSIRange>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d1eb      	bne.n	80009c0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6023      	str	r3, [r4, #0]
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	6a2a      	ldr	r2, [r5, #32]
 80009f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009f8:	4313      	orrs	r3, r2
 80009fa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009fc:	6863      	ldr	r3, [r4, #4]
 80009fe:	69ea      	ldr	r2, [r5, #28]
 8000a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a08:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000a0a:	f7ff ff61 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
 8000a0e:	68a3      	ldr	r3, [r4, #8]
 8000a10:	4a91      	ldr	r2, [pc, #580]	; (8000c58 <HAL_RCC_OscConfig+0x2b8>)
 8000a12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
 8000a18:	40d8      	lsrs	r0, r3
 8000a1a:	4b90      	ldr	r3, [pc, #576]	; (8000c5c <HAL_RCC_OscConfig+0x2bc>)
 8000a1c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f002 fe26 	bl	8003670 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	07de      	lsls	r6, r3, #31
 8000a28:	d45b      	bmi.n	8000ae2 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	079c      	lsls	r4, r3, #30
 8000a2e:	f100 80a3 	bmi.w	8000b78 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	0719      	lsls	r1, r3, #28
 8000a36:	f100 80e1 	bmi.w	8000bfc <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	075a      	lsls	r2, r3, #29
 8000a3e:	f100 810f 	bmi.w	8000c60 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a42:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	f040 8176 	bne.w	8000d36 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	e7b9      	b.n	80009c2 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a5c:	4303      	orrs	r3, r0
 8000a5e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	69ea      	ldr	r2, [r5, #28]
 8000a64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a6c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a6e:	f7ff feed 	bl	800084c <RCC_SetFlashLatencyFromMSIRange>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d0c9      	beq.n	8000a0a <HAL_RCC_OscConfig+0x6a>
 8000a76:	e7a3      	b.n	80009c0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a78:	69ab      	ldr	r3, [r5, #24]
 8000a7a:	b313      	cbz	r3, 8000ac2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a84:	f7ff fd46 	bl	8000514 <HAL_GetTick>
 8000a88:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	079b      	lsls	r3, r3, #30
 8000a8e:	d511      	bpl.n	8000ab4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6023      	str	r3, [r4, #0]
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	6a2a      	ldr	r2, [r5, #32]
 8000a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000aa4:	6863      	ldr	r3, [r4, #4]
 8000aa6:	69ea      	ldr	r2, [r5, #28]
 8000aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000aac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ab0:	6063      	str	r3, [r4, #4]
 8000ab2:	e7b7      	b.n	8000a24 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ab4:	f7ff fd2e 	bl	8000514 <HAL_GetTick>
 8000ab8:	1b80      	subs	r0, r0, r6
 8000aba:	2802      	cmp	r0, #2
 8000abc:	d9e5      	bls.n	8000a8a <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8000abe:	2003      	movs	r0, #3
 8000ac0:	e77f      	b.n	80009c2 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aca:	f7ff fd23 	bl	8000514 <HAL_GetTick>
 8000ace:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	079f      	lsls	r7, r3, #30
 8000ad4:	d5a6      	bpl.n	8000a24 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ad6:	f7ff fd1d 	bl	8000514 <HAL_GetTick>
 8000ada:	1b80      	subs	r0, r0, r6
 8000adc:	2802      	cmp	r0, #2
 8000ade:	d9f7      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x130>
 8000ae0:	e7ed      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000ae2:	4c5c      	ldr	r4, [pc, #368]	; (8000c54 <HAL_RCC_OscConfig+0x2b4>)
 8000ae4:	68a3      	ldr	r3, [r4, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d009      	beq.n	8000b02 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aee:	68a3      	ldr	r3, [r4, #8]
 8000af0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d10b      	bne.n	8000b10 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000af8:	68e3      	ldr	r3, [r4, #12]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d106      	bne.n	8000b10 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	0398      	lsls	r0, r3, #14
 8000b06:	d590      	bpl.n	8000a2a <HAL_RCC_OscConfig+0x8a>
 8000b08:	686b      	ldr	r3, [r5, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d18d      	bne.n	8000a2a <HAL_RCC_OscConfig+0x8a>
 8000b0e:	e757      	b.n	80009c0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b10:	686b      	ldr	r3, [r5, #4]
 8000b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b16:	d110      	bne.n	8000b3a <HAL_RCC_OscConfig+0x19a>
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b20:	f7ff fcf8 	bl	8000514 <HAL_GetTick>
 8000b24:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	0399      	lsls	r1, r3, #14
 8000b2a:	f53f af7e 	bmi.w	8000a2a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fcf1 	bl	8000514 <HAL_GetTick>
 8000b32:	1b80      	subs	r0, r0, r6
 8000b34:	2864      	cmp	r0, #100	; 0x64
 8000b36:	d9f6      	bls.n	8000b26 <HAL_RCC_OscConfig+0x186>
 8000b38:	e7c1      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b3e:	d104      	bne.n	8000b4a <HAL_RCC_OscConfig+0x1aa>
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	6023      	str	r3, [r4, #0]
 8000b48:	e7e6      	b.n	8000b18 <HAL_RCC_OscConfig+0x178>
 8000b4a:	6822      	ldr	r2, [r4, #0]
 8000b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b50:	6022      	str	r2, [r4, #0]
 8000b52:	6822      	ldr	r2, [r4, #0]
 8000b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b58:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1e0      	bne.n	8000b20 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fcd9 	bl	8000514 <HAL_GetTick>
 8000b62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	039a      	lsls	r2, r3, #14
 8000b68:	f57f af5f 	bpl.w	8000a2a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b6c:	f7ff fcd2 	bl	8000514 <HAL_GetTick>
 8000b70:	1b80      	subs	r0, r0, r6
 8000b72:	2864      	cmp	r0, #100	; 0x64
 8000b74:	d9f6      	bls.n	8000b64 <HAL_RCC_OscConfig+0x1c4>
 8000b76:	e7a2      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000b78:	4c36      	ldr	r4, [pc, #216]	; (8000c54 <HAL_RCC_OscConfig+0x2b4>)
 8000b7a:	68a3      	ldr	r3, [r4, #8]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d009      	beq.n	8000b98 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b84:	68a3      	ldr	r3, [r4, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000b8a:	2b0c      	cmp	r3, #12
 8000b8c:	d113      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b8e:	68e3      	ldr	r3, [r4, #12]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d10e      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	055b      	lsls	r3, r3, #21
 8000b9c:	d503      	bpl.n	8000ba6 <HAL_RCC_OscConfig+0x206>
 8000b9e:	68eb      	ldr	r3, [r5, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f43f af0d 	beq.w	80009c0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba6:	6863      	ldr	r3, [r4, #4]
 8000ba8:	692a      	ldr	r2, [r5, #16]
 8000baa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000bae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bb2:	6063      	str	r3, [r4, #4]
 8000bb4:	e73d      	b.n	8000a32 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bb6:	68eb      	ldr	r3, [r5, #12]
 8000bb8:	b17b      	cbz	r3, 8000bda <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fca7 	bl	8000514 <HAL_GetTick>
 8000bc6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	055f      	lsls	r7, r3, #21
 8000bcc:	d4eb      	bmi.n	8000ba6 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bce:	f7ff fca1 	bl	8000514 <HAL_GetTick>
 8000bd2:	1b80      	subs	r0, r0, r6
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f7      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x228>
 8000bd8:	e771      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000be0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000be2:	f7ff fc97 	bl	8000514 <HAL_GetTick>
 8000be6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	0558      	lsls	r0, r3, #21
 8000bec:	f57f af21 	bpl.w	8000a32 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf0:	f7ff fc90 	bl	8000514 <HAL_GetTick>
 8000bf4:	1b80      	subs	r0, r0, r6
 8000bf6:	2802      	cmp	r0, #2
 8000bf8:	d9f6      	bls.n	8000be8 <HAL_RCC_OscConfig+0x248>
 8000bfa:	e760      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bfc:	696b      	ldr	r3, [r5, #20]
 8000bfe:	4c15      	ldr	r4, [pc, #84]	; (8000c54 <HAL_RCC_OscConfig+0x2b4>)
 8000c00:	b19b      	cbz	r3, 8000c2a <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8000c02:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fc81 	bl	8000514 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000c14:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c18:	079b      	lsls	r3, r3, #30
 8000c1a:	f53f af0e 	bmi.w	8000a3a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c1e:	f7ff fc79 	bl	8000514 <HAL_GetTick>
 8000c22:	1b80      	subs	r0, r0, r6
 8000c24:	2802      	cmp	r0, #2
 8000c26:	d9f5      	bls.n	8000c14 <HAL_RCC_OscConfig+0x274>
 8000c28:	e749      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8000c2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c36:	f7ff fc6d 	bl	8000514 <HAL_GetTick>
 8000c3a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000c3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c40:	079f      	lsls	r7, r3, #30
 8000c42:	f57f aefa 	bpl.w	8000a3a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c46:	f7ff fc65 	bl	8000514 <HAL_GetTick>
 8000c4a:	1b80      	subs	r0, r0, r6
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d9f5      	bls.n	8000c3c <HAL_RCC_OscConfig+0x29c>
 8000c50:	e735      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	0800388f 	.word	0x0800388f
 8000c5c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c60:	4c66      	ldr	r4, [pc, #408]	; (8000dfc <HAL_RCC_OscConfig+0x45c>)
 8000c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c64:	00de      	lsls	r6, r3, #3
 8000c66:	d427      	bmi.n	8000cb8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c7a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c7c:	4e60      	ldr	r6, [pc, #384]	; (8000e00 <HAL_RCC_OscConfig+0x460>)
 8000c7e:	6833      	ldr	r3, [r6, #0]
 8000c80:	05d8      	lsls	r0, r3, #23
 8000c82:	d51b      	bpl.n	8000cbc <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c84:	68ab      	ldr	r3, [r5, #8]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d129      	bne.n	8000cde <HAL_RCC_OscConfig+0x33e>
 8000c8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c96:	f7ff fc3d 	bl	8000514 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c9a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c9e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000ca0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ca4:	079a      	lsls	r2, r3, #30
 8000ca6:	d540      	bpl.n	8000d2a <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8000ca8:	2f00      	cmp	r7, #0
 8000caa:	f43f aeca 	beq.w	8000a42 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cb6:	e6c4      	b.n	8000a42 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e7df      	b.n	8000c7c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000cbc:	6833      	ldr	r3, [r6, #0]
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fc26 	bl	8000514 <HAL_GetTick>
 8000cc8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cca:	6833      	ldr	r3, [r6, #0]
 8000ccc:	05d9      	lsls	r1, r3, #23
 8000cce:	d4d9      	bmi.n	8000c84 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cd0:	f7ff fc20 	bl	8000514 <HAL_GetTick>
 8000cd4:	eba0 0008 	sub.w	r0, r0, r8
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d9f6      	bls.n	8000cca <HAL_RCC_OscConfig+0x32a>
 8000cdc:	e6ef      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cde:	2b05      	cmp	r3, #5
 8000ce0:	d106      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x350>
 8000ce2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000cee:	e7cc      	b.n	8000c8a <HAL_RCC_OscConfig+0x2ea>
 8000cf0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000cfc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d00:	f022 0204 	bic.w	r2, r2, #4
 8000d04:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1c4      	bne.n	8000c96 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fc02 	bl	8000514 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d10:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d14:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000d16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d1a:	079b      	lsls	r3, r3, #30
 8000d1c:	d5c4      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fbf9 	bl	8000514 <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	4540      	cmp	r0, r8
 8000d26:	d9f6      	bls.n	8000d16 <HAL_RCC_OscConfig+0x376>
 8000d28:	e6c9      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f7ff fbf3 	bl	8000514 <HAL_GetTick>
 8000d2e:	1b80      	subs	r0, r0, r6
 8000d30:	4540      	cmp	r0, r8
 8000d32:	d9b5      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x300>
 8000d34:	e6c3      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d36:	4c31      	ldr	r4, [pc, #196]	; (8000dfc <HAL_RCC_OscConfig+0x45c>)
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b0c      	cmp	r3, #12
 8000d40:	f43f ae3e 	beq.w	80009c0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000d44:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d46:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d4c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d4e:	d137      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8000d50:	f7ff fbe0 	bl	8000514 <HAL_GetTick>
 8000d54:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	019f      	lsls	r7, r3, #6
 8000d5a:	d42b      	bmi.n	8000db4 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d5c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d64:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000d66:	3a01      	subs	r2, #1
 8000d68:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000d6c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000d6e:	0912      	lsrs	r2, r2, #4
 8000d70:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000d74:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000d76:	0852      	lsrs	r2, r2, #1
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000d7e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000d80:	0852      	lsrs	r2, r2, #1
 8000d82:	3a01      	subs	r2, #1
 8000d84:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000d88:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d90:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000d92:	68e3      	ldr	r3, [r4, #12]
 8000d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d98:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fbbb 	bl	8000514 <HAL_GetTick>
 8000d9e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	0198      	lsls	r0, r3, #6
 8000da4:	f53f ae51 	bmi.w	8000a4a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000da8:	f7ff fbb4 	bl	8000514 <HAL_GetTick>
 8000dac:	1b40      	subs	r0, r0, r5
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9f6      	bls.n	8000da0 <HAL_RCC_OscConfig+0x400>
 8000db2:	e684      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000db4:	f7ff fbae 	bl	8000514 <HAL_GetTick>
 8000db8:	1b80      	subs	r0, r0, r6
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9cb      	bls.n	8000d56 <HAL_RCC_OscConfig+0x3b6>
 8000dbe:	e67e      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	0119      	lsls	r1, r3, #4
 8000dc4:	d406      	bmi.n	8000dd4 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8000dc6:	6823      	ldr	r3, [r4, #0]
           &&
 8000dc8:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000dca:	bf5e      	ittt	pl
 8000dcc:	68e3      	ldrpl	r3, [r4, #12]
 8000dce:	f023 0303 	bicpl.w	r3, r3, #3
 8000dd2:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000dd4:	68e3      	ldr	r3, [r4, #12]
 8000dd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dde:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000de0:	f7ff fb98 	bl	8000514 <HAL_GetTick>
 8000de4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	f57f ae2e 	bpl.w	8000a4a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dee:	f7ff fb91 	bl	8000514 <HAL_GetTick>
 8000df2:	1b40      	subs	r0, r0, r5
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d9f6      	bls.n	8000de6 <HAL_RCC_OscConfig+0x446>
 8000df8:	e661      	b.n	8000abe <HAL_RCC_OscConfig+0x11e>
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40007000 	.word	0x40007000

08000e04 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e04:	4a56      	ldr	r2, [pc, #344]	; (8000f60 <HAL_RCC_ClockConfig+0x15c>)
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	428b      	cmp	r3, r1
{
 8000e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e12:	4605      	mov	r5, r0
 8000e14:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e16:	d32b      	bcc.n	8000e70 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	07d9      	lsls	r1, r3, #31
 8000e1c:	d435      	bmi.n	8000e8a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e1e:	6829      	ldr	r1, [r5, #0]
 8000e20:	078a      	lsls	r2, r1, #30
 8000e22:	f100 8083 	bmi.w	8000f2c <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e26:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <HAL_RCC_ClockConfig+0x15c>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	f0c0 8084 	bcc.w	8000f3c <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e34:	f011 0f04 	tst.w	r1, #4
 8000e38:	4c4a      	ldr	r4, [pc, #296]	; (8000f64 <HAL_RCC_ClockConfig+0x160>)
 8000e3a:	f040 808a 	bne.w	8000f52 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e3e:	070b      	lsls	r3, r1, #28
 8000e40:	d506      	bpl.n	8000e50 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e42:	68a3      	ldr	r3, [r4, #8]
 8000e44:	692a      	ldr	r2, [r5, #16]
 8000e46:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e4e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e50:	f7ff fd3e 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
 8000e54:	68a3      	ldr	r3, [r4, #8]
 8000e56:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_RCC_ClockConfig+0x164>)
 8000e58:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	40d8      	lsrs	r0, r3
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <HAL_RCC_ClockConfig+0x168>)
 8000e62:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f002 fc03 	bl	8003670 <HAL_InitTick>
  return HAL_OK;
 8000e6a:	2000      	movs	r0, #0
}
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e70:	6813      	ldr	r3, [r2, #0]
 8000e72:	f023 0307 	bic.w	r3, r3, #7
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d0c9      	beq.n	8000e18 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
 8000e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e8a:	686a      	ldr	r2, [r5, #4]
 8000e8c:	4c35      	ldr	r4, [pc, #212]	; (8000f64 <HAL_RCC_ClockConfig+0x160>)
 8000e8e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e90:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e92:	d11c      	bne.n	8000ece <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000e98:	d0f4      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e9a:	68a3      	ldr	r3, [r4, #8]
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000ea4:	f7ff fb36 	bl	8000514 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ea8:	686b      	ldr	r3, [r5, #4]
 8000eaa:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000eac:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eae:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eb2:	d118      	bne.n	8000ee6 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb4:	68a3      	ldr	r3, [r4, #8]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b0c      	cmp	r3, #12
 8000ebc:	d0af      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebe:	f7ff fb29 	bl	8000514 <HAL_GetTick>
 8000ec2:	1bc0      	subs	r0, r0, r7
 8000ec4:	4540      	cmp	r0, r8
 8000ec6:	d9f5      	bls.n	8000eb4 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000ec8:	2003      	movs	r0, #3
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ece:	2a02      	cmp	r2, #2
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000ed2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed6:	e7df      	b.n	8000e98 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000ed8:	b912      	cbnz	r2, 8000ee0 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000eda:	f013 0f02 	tst.w	r3, #2
 8000ede:	e7db      	b.n	8000e98 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000ee0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000ee4:	e7d8      	b.n	8000e98 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d10a      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000eea:	68a3      	ldr	r3, [r4, #8]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d094      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef4:	f7ff fb0e 	bl	8000514 <HAL_GetTick>
 8000ef8:	1bc0      	subs	r0, r0, r7
 8000efa:	4540      	cmp	r0, r8
 8000efc:	d9f5      	bls.n	8000eea <HAL_RCC_ClockConfig+0xe6>
 8000efe:	e7e3      	b.n	8000ec8 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f00:	b973      	cbnz	r3, 8000f20 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000f02:	68a3      	ldr	r3, [r4, #8]
 8000f04:	f013 0f0c 	tst.w	r3, #12
 8000f08:	d089      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0a:	f7ff fb03 	bl	8000514 <HAL_GetTick>
 8000f0e:	1bc0      	subs	r0, r0, r7
 8000f10:	4540      	cmp	r0, r8
 8000f12:	d9f6      	bls.n	8000f02 <HAL_RCC_ClockConfig+0xfe>
 8000f14:	e7d8      	b.n	8000ec8 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f16:	f7ff fafd 	bl	8000514 <HAL_GetTick>
 8000f1a:	1bc0      	subs	r0, r0, r7
 8000f1c:	4540      	cmp	r0, r8
 8000f1e:	d8d3      	bhi.n	8000ec8 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000f20:	68a3      	ldr	r3, [r4, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d1f5      	bne.n	8000f16 <HAL_RCC_ClockConfig+0x112>
 8000f2a:	e778      	b.n	8000e1e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_RCC_ClockConfig+0x160>)
 8000f2e:	68a8      	ldr	r0, [r5, #8]
 8000f30:	6893      	ldr	r3, [r2, #8]
 8000f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f36:	4303      	orrs	r3, r0
 8000f38:	6093      	str	r3, [r2, #8]
 8000f3a:	e774      	b.n	8000e26 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	f023 0307 	bic.w	r3, r3, #7
 8000f42:	4333      	orrs	r3, r6
 8000f44:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	429e      	cmp	r6, r3
 8000f4e:	d199      	bne.n	8000e84 <HAL_RCC_ClockConfig+0x80>
 8000f50:	e770      	b.n	8000e34 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f52:	68a3      	ldr	r3, [r4, #8]
 8000f54:	68ea      	ldr	r2, [r5, #12]
 8000f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60a3      	str	r3, [r4, #8]
 8000f5e:	e76e      	b.n	8000e3e <HAL_RCC_ClockConfig+0x3a>
 8000f60:	40022000 	.word	0x40022000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	0800388f 	.word	0x0800388f
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_RCC_GetHCLKFreq>:
}
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f8a:	6810      	ldr	r0, [r2, #0]
}
 8000f8c:	40d8      	lsrs	r0, r3
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000
 8000f94:	0800389f 	.word	0x0800389f
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000faa:	6810      	ldr	r0, [r2, #0]
}
 8000fac:	40d8      	lsrs	r0, r3
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	0800389f 	.word	0x0800389f
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_GetClockConfig+0x34>)
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	f002 0203 	and.w	r2, r2, #3
 8000fc8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000fd0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000fd8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fe2:	6103      	str	r3, [r0, #16]
  *pFLatency = READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_RCC_GetClockConfig+0x38>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	600b      	str	r3, [r1, #0]
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <RCCEx_PLLSAI1_Config+0x118>)
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	f012 0f03 	tst.w	r2, #3
{
 8001002:	4605      	mov	r5, r0
 8001004:	460e      	mov	r6, r1
 8001006:	461c      	mov	r4, r3
 8001008:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800100a:	d02a      	beq.n	8001062 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	4282      	cmp	r2, r0
 8001014:	d13c      	bne.n	8001090 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001016:	2a00      	cmp	r2, #0
 8001018:	d03a      	beq.n	8001090 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800101a:	68db      	ldr	r3, [r3, #12]
       ||
 800101c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800101e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001022:	3301      	adds	r3, #1
       ||
 8001024:	4293      	cmp	r3, r2
 8001026:	d133      	bne.n	8001090 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800102e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001030:	f7ff fa70 	bl	8000514 <HAL_GetTick>
 8001034:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	011a      	lsls	r2, r3, #4
 800103a:	d432      	bmi.n	80010a2 <RCCEx_PLLSAI1_Config+0xaa>
 800103c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800103e:	2e00      	cmp	r6, #0
 8001040:	d036      	beq.n	80010b0 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001042:	2e01      	cmp	r6, #1
 8001044:	d150      	bne.n	80010e8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001046:	6922      	ldr	r2, [r4, #16]
 8001048:	6928      	ldr	r0, [r5, #16]
 800104a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800104e:	0840      	lsrs	r0, r0, #1
 8001050:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001054:	3801      	subs	r0, #1
 8001056:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800105a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800105e:	6122      	str	r2, [r4, #16]
 8001060:	e032      	b.n	80010c8 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001062:	2802      	cmp	r0, #2
 8001064:	d010      	beq.n	8001088 <RCCEx_PLLSAI1_Config+0x90>
 8001066:	2803      	cmp	r0, #3
 8001068:	d014      	beq.n	8001094 <RCCEx_PLLSAI1_Config+0x9c>
 800106a:	2801      	cmp	r0, #1
 800106c:	d110      	bne.n	8001090 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	079f      	lsls	r7, r3, #30
 8001072:	d538      	bpl.n	80010e6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001074:	68e3      	ldr	r3, [r4, #12]
 8001076:	686a      	ldr	r2, [r5, #4]
 8001078:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800107c:	3a01      	subs	r2, #1
 800107e:	4318      	orrs	r0, r3
 8001080:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001084:	60e0      	str	r0, [r4, #12]
 8001086:	e7cf      	b.n	8001028 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800108e:	d1f1      	bne.n	8001074 <RCCEx_PLLSAI1_Config+0x7c>
 8001090:	2001      	movs	r0, #1
 8001092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	0391      	lsls	r1, r2, #14
 8001098:	d4ec      	bmi.n	8001074 <RCCEx_PLLSAI1_Config+0x7c>
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80010a0:	e7f5      	b.n	800108e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010a2:	f7ff fa37 	bl	8000514 <HAL_GetTick>
 80010a6:	1bc0      	subs	r0, r0, r7
 80010a8:	2802      	cmp	r0, #2
 80010aa:	d9c4      	bls.n	8001036 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80010ac:	2003      	movs	r0, #3
 80010ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010b0:	6921      	ldr	r1, [r4, #16]
 80010b2:	68eb      	ldr	r3, [r5, #12]
 80010b4:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80010b8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80010bc:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80010c6:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ce:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fa20 	bl	8000514 <HAL_GetTick>
 80010d4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	d513      	bpl.n	8001104 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	69aa      	ldr	r2, [r5, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	6123      	str	r3, [r4, #16]
 80010e4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010e8:	6923      	ldr	r3, [r4, #16]
 80010ea:	6968      	ldr	r0, [r5, #20]
 80010ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80010f0:	0840      	lsrs	r0, r0, #1
 80010f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010f6:	3801      	subs	r0, #1
 80010f8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80010fc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001100:	6123      	str	r3, [r4, #16]
 8001102:	e7e1      	b.n	80010c8 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001104:	f7ff fa06 	bl	8000514 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	2802      	cmp	r0, #2
 800110c:	d9e3      	bls.n	80010d6 <RCCEx_PLLSAI1_Config+0xde>
 800110e:	e7cd      	b.n	80010ac <RCCEx_PLLSAI1_Config+0xb4>
 8001110:	40021000 	.word	0x40021000

08001114 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <RCCEx_PLLSAI2_Config+0xf8>)
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	f012 0f03 	tst.w	r2, #3
{
 800111e:	4605      	mov	r5, r0
 8001120:	460e      	mov	r6, r1
 8001122:	461c      	mov	r4, r3
 8001124:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001126:	d028      	beq.n	800117a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	4282      	cmp	r2, r0
 8001130:	d13a      	bne.n	80011a8 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001132:	2a00      	cmp	r2, #0
 8001134:	d038      	beq.n	80011a8 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001136:	68db      	ldr	r3, [r3, #12]
       ||
 8001138:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800113a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800113e:	3301      	adds	r3, #1
       ||
 8001140:	4293      	cmp	r3, r2
 8001142:	d131      	bne.n	80011a8 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800114a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800114c:	f7ff f9e2 	bl	8000514 <HAL_GetTick>
 8001150:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	009a      	lsls	r2, r3, #2
 8001156:	d430      	bmi.n	80011ba <RCCEx_PLLSAI2_Config+0xa6>
 8001158:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800115a:	2e00      	cmp	r6, #0
 800115c:	d034      	beq.n	80011c8 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800115e:	6963      	ldr	r3, [r4, #20]
 8001160:	6929      	ldr	r1, [r5, #16]
 8001162:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001166:	0849      	lsrs	r1, r1, #1
 8001168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800116c:	3901      	subs	r1, #1
 800116e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001172:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001176:	6163      	str	r3, [r4, #20]
 8001178:	e032      	b.n	80011e0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800117a:	2802      	cmp	r0, #2
 800117c:	d010      	beq.n	80011a0 <RCCEx_PLLSAI2_Config+0x8c>
 800117e:	2803      	cmp	r0, #3
 8001180:	d014      	beq.n	80011ac <RCCEx_PLLSAI2_Config+0x98>
 8001182:	2801      	cmp	r0, #1
 8001184:	d110      	bne.n	80011a8 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	079f      	lsls	r7, r3, #30
 800118a:	d538      	bpl.n	80011fe <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800118c:	68e3      	ldr	r3, [r4, #12]
 800118e:	686a      	ldr	r2, [r5, #4]
 8001190:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001194:	3a01      	subs	r2, #1
 8001196:	4318      	orrs	r0, r3
 8001198:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800119c:	60e0      	str	r0, [r4, #12]
 800119e:	e7d1      	b.n	8001144 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80011a6:	d1f1      	bne.n	800118c <RCCEx_PLLSAI2_Config+0x78>
 80011a8:	2001      	movs	r0, #1
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	0391      	lsls	r1, r2, #14
 80011b0:	d4ec      	bmi.n	800118c <RCCEx_PLLSAI2_Config+0x78>
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80011b8:	e7f5      	b.n	80011a6 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80011ba:	f7ff f9ab 	bl	8000514 <HAL_GetTick>
 80011be:	1bc0      	subs	r0, r0, r7
 80011c0:	2802      	cmp	r0, #2
 80011c2:	d9c6      	bls.n	8001152 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80011c4:	2003      	movs	r0, #3
 80011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80011c8:	6962      	ldr	r2, [r4, #20]
 80011ca:	68eb      	ldr	r3, [r5, #12]
 80011cc:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80011d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80011de:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff f994 	bl	8000514 <HAL_GetTick>
 80011ec:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	d505      	bpl.n	8001200 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80011f4:	6963      	ldr	r3, [r4, #20]
 80011f6:	696a      	ldr	r2, [r5, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	6163      	str	r3, [r4, #20]
 80011fc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80011fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001200:	f7ff f988 	bl	8000514 <HAL_GetTick>
 8001204:	1b80      	subs	r0, r0, r6
 8001206:	2802      	cmp	r0, #2
 8001208:	d9f1      	bls.n	80011ee <RCCEx_PLLSAI2_Config+0xda>
 800120a:	e7db      	b.n	80011c4 <RCCEx_PLLSAI2_Config+0xb0>
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001210:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001214:	6806      	ldr	r6, [r0, #0]
 8001216:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800121a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800121c:	d024      	beq.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800121e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001220:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001224:	d02c      	beq.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001226:	d802      	bhi.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001228:	b1c1      	cbz	r1, 800125c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800122a:	2601      	movs	r6, #1
 800122c:	e01c      	b.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800122e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001232:	d00d      	beq.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001234:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001238:	d1f7      	bne.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800123a:	4a53      	ldr	r2, [pc, #332]	; (8001388 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800123c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800123e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001242:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001246:	430b      	orrs	r3, r1
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800124c:	2600      	movs	r6, #0
 800124e:	e00b      	b.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001252:	68d3      	ldr	r3, [r2, #12]
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	60d3      	str	r3, [r2, #12]
      break;
 800125a:	e7ee      	b.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800125c:	3004      	adds	r0, #4
 800125e:	f7ff fecb 	bl	8000ff8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001262:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001264:	2800      	cmp	r0, #0
 8001266:	d0e8      	beq.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	04d8      	lsls	r0, r3, #19
 800126c:	d506      	bpl.n	800127c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800126e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001270:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001274:	d07c      	beq.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001276:	d808      	bhi.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001278:	b1a9      	cbz	r1, 80012a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800127a:	2601      	movs	r6, #1
 800127c:	4635      	mov	r5, r6
 800127e:	e021      	b.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001280:	2100      	movs	r1, #0
 8001282:	3020      	adds	r0, #32
 8001284:	f7ff ff46 	bl	8001114 <RCCEx_PLLSAI2_Config>
 8001288:	e7eb      	b.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800128a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800128e:	d004      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001290:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001294:	d1f1      	bne.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001296:	4635      	mov	r5, r6
 8001298:	e009      	b.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800129a:	4a3b      	ldr	r2, [pc, #236]	; (8001388 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800129c:	68d3      	ldr	r3, [r2, #12]
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	60d3      	str	r3, [r2, #12]
 80012a4:	e7f7      	b.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012a6:	1d20      	adds	r0, r4, #4
 80012a8:	f7ff fea6 	bl	8000ff8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80012ae:	2d00      	cmp	r5, #0
 80012b0:	d164      	bne.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012b2:	4a35      	ldr	r2, [pc, #212]	; (8001388 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80012b4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80012b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012ba:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80012be:	430b      	orrs	r3, r1
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	0399      	lsls	r1, r3, #14
 80012c8:	f140 815b 	bpl.w	8001582 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012cc:	4f2e      	ldr	r7, [pc, #184]	; (8001388 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80012ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012d0:	00da      	lsls	r2, r3, #3
 80012d2:	d455      	bmi.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012da:	65bb      	str	r3, [r7, #88]	; 0x58
 80012dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012e6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ea:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800138c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80012ee:	f8d9 3000 	ldr.w	r3, [r9]
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80012fa:	f7ff f90b 	bl	8000514 <HAL_GetTick>
 80012fe:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001300:	f8d9 3000 	ldr.w	r3, [r9]
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	d543      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001308:	2d00      	cmp	r5, #0
 800130a:	d148      	bne.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800130c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001310:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001314:	d015      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001316:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800131a:	4293      	cmp	r3, r2
 800131c:	d011      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800131e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001322:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001326:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800132a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800132e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800133a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800133e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001342:	07d8      	lsls	r0, r3, #31
 8001344:	d509      	bpl.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8001346:	f7ff f8e5 	bl	8000514 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800134e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001354:	0799      	lsls	r1, r3, #30
 8001356:	f140 810d 	bpl.w	8001574 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800135a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800135e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001366:	4313      	orrs	r3, r2
 8001368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800136c:	4635      	mov	r5, r6
 800136e:	e016      	b.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001370:	2100      	movs	r1, #0
 8001372:	f104 0020 	add.w	r0, r4, #32
 8001376:	f7ff fecd 	bl	8001114 <RCCEx_PLLSAI2_Config>
 800137a:	e797      	b.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800137c:	462e      	mov	r6, r5
 800137e:	e7a1      	b.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001380:	f04f 0800 	mov.w	r8, #0
 8001384:	e7b1      	b.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001390:	f7ff f8c0 	bl	8000514 <HAL_GetTick>
 8001394:	eba0 000a 	sub.w	r0, r0, sl
 8001398:	2802      	cmp	r0, #2
 800139a:	d9b1      	bls.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800139c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800139e:	f1b8 0f00 	cmp.w	r8, #0
 80013a2:	d003      	beq.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013aa:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	07da      	lsls	r2, r3, #31
 80013b0:	d508      	bpl.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013b2:	498a      	ldr	r1, [pc, #552]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013ba:	f022 0203 	bic.w	r2, r2, #3
 80013be:	4302      	orrs	r2, r0
 80013c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013c4:	079f      	lsls	r7, r3, #30
 80013c6:	d508      	bpl.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013c8:	4984      	ldr	r1, [pc, #528]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013d0:	f022 020c 	bic.w	r2, r2, #12
 80013d4:	4302      	orrs	r2, r0
 80013d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80013da:	075e      	lsls	r6, r3, #29
 80013dc:	d508      	bpl.n	80013f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013de:	497f      	ldr	r1, [pc, #508]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80013e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80013ea:	4302      	orrs	r2, r0
 80013ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80013f0:	0718      	lsls	r0, r3, #28
 80013f2:	d508      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80013f4:	4979      	ldr	r1, [pc, #484]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80013f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80013f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80013fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001400:	4302      	orrs	r2, r0
 8001402:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001406:	06d9      	lsls	r1, r3, #27
 8001408:	d508      	bpl.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800140a:	4974      	ldr	r1, [pc, #464]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800140c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800140e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001412:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001416:	4302      	orrs	r2, r0
 8001418:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800141c:	069a      	lsls	r2, r3, #26
 800141e:	d508      	bpl.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001420:	496e      	ldr	r1, [pc, #440]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001422:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001424:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001428:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800142c:	4302      	orrs	r2, r0
 800142e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001432:	059f      	lsls	r7, r3, #22
 8001434:	d508      	bpl.n	8001448 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001436:	4969      	ldr	r1, [pc, #420]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001438:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800143a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800143e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001442:	4302      	orrs	r2, r0
 8001444:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001448:	055e      	lsls	r6, r3, #21
 800144a:	d508      	bpl.n	800145e <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800144c:	4963      	ldr	r1, [pc, #396]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800144e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001450:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001454:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001458:	4302      	orrs	r2, r0
 800145a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800145e:	0658      	lsls	r0, r3, #25
 8001460:	d508      	bpl.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001462:	495e      	ldr	r1, [pc, #376]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001464:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001466:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800146a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800146e:	4302      	orrs	r2, r0
 8001470:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001474:	0619      	lsls	r1, r3, #24
 8001476:	d508      	bpl.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001478:	4958      	ldr	r1, [pc, #352]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800147a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800147c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001480:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001484:	4302      	orrs	r2, r0
 8001486:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800148a:	05da      	lsls	r2, r3, #23
 800148c:	d508      	bpl.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800148e:	4953      	ldr	r1, [pc, #332]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001492:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001496:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800149a:	4302      	orrs	r2, r0
 800149c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014a0:	049b      	lsls	r3, r3, #18
 80014a2:	d50f      	bpl.n	80014c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014a4:	4a4d      	ldr	r2, [pc, #308]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80014a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014ac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014b0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014ba:	d164      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014bc:	68d3      	ldr	r3, [r2, #12]
 80014be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014c2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	031f      	lsls	r7, r3, #12
 80014c8:	d50f      	bpl.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014ca:	4a44      	ldr	r2, [pc, #272]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014cc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80014ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014d2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014d6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014d8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80014e0:	d15c      	bne.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014e2:	68d3      	ldr	r3, [r2, #12]
 80014e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	035e      	lsls	r6, r3, #13
 80014ee:	d50f      	bpl.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80014f0:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014f2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80014f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80014f8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80014fc:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80014fe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001506:	d154      	bne.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001508:	68d3      	ldr	r3, [r2, #12]
 800150a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	0458      	lsls	r0, r3, #17
 8001514:	d512      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001516:	4931      	ldr	r1, [pc, #196]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001518:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800151a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800151e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001522:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001524:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800152c:	d14c      	bne.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800152e:	2102      	movs	r1, #2
 8001530:	1d20      	adds	r0, r4, #4
 8001532:	f7ff fd61 	bl	8000ff8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001536:	2800      	cmp	r0, #0
 8001538:	bf18      	it	ne
 800153a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	0411      	lsls	r1, r2, #16
 8001540:	d508      	bpl.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001542:	4926      	ldr	r1, [pc, #152]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001544:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001546:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800154a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800154e:	4303      	orrs	r3, r0
 8001550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001554:	03d3      	lsls	r3, r2, #15
 8001556:	d509      	bpl.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800155a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800155e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001562:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001566:	430b      	orrs	r3, r1
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800156c:	4628      	mov	r0, r5
 800156e:	b002      	add	sp, #8
 8001570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7fe ffce 	bl	8000514 <HAL_GetTick>
 8001578:	1b40      	subs	r0, r0, r5
 800157a:	4548      	cmp	r0, r9
 800157c:	f67f aee8 	bls.w	8001350 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001580:	e70c      	b.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001582:	4635      	mov	r5, r6
 8001584:	e712      	b.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001586:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800158a:	d19b      	bne.n	80014c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800158c:	2101      	movs	r1, #1
 800158e:	1d20      	adds	r0, r4, #4
 8001590:	f7ff fd32 	bl	8000ff8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001594:	2800      	cmp	r0, #0
 8001596:	bf18      	it	ne
 8001598:	4605      	movne	r5, r0
 800159a:	e793      	b.n	80014c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800159c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015a0:	d1a3      	bne.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015a2:	2101      	movs	r1, #1
 80015a4:	1d20      	adds	r0, r4, #4
 80015a6:	f7ff fd27 	bl	8000ff8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015aa:	2800      	cmp	r0, #0
 80015ac:	bf18      	it	ne
 80015ae:	4605      	movne	r5, r0
 80015b0:	e79b      	b.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80015b2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80015b6:	d1ab      	bne.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80015b8:	2101      	movs	r1, #1
 80015ba:	1d20      	adds	r0, r4, #4
 80015bc:	f7ff fd1c 	bl	8000ff8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015c0:	2800      	cmp	r0, #0
 80015c2:	bf18      	it	ne
 80015c4:	4605      	movne	r5, r0
 80015c6:	e7a3      	b.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80015c8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80015cc:	d1b6      	bne.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80015ce:	2102      	movs	r1, #2
 80015d0:	f104 0020 	add.w	r0, r4, #32
 80015d4:	f7ff fd9e 	bl	8001114 <RCCEx_PLLSAI2_Config>
 80015d8:	e7ad      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_TIM_Base_MspInit>:
 80015e0:	4770      	bx	lr

080015e2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e2:	6803      	ldr	r3, [r0, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80015f4:	2000      	movs	r0, #0
 80015f6:	4770      	bx	lr

080015f8 <HAL_TIM_OC_DelayElapsedCallback>:
 80015f8:	4770      	bx	lr

080015fa <HAL_TIM_IC_CaptureCallback>:
 80015fa:	4770      	bx	lr

080015fc <HAL_TIM_PWM_PulseFinishedCallback>:
 80015fc:	4770      	bx	lr

080015fe <HAL_TIM_TriggerCallback>:
 80015fe:	4770      	bx	lr

08001600 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	0791      	lsls	r1, r2, #30
{
 8001606:	b510      	push	{r4, lr}
 8001608:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800160a:	d50e      	bpl.n	800162a <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	0792      	lsls	r2, r2, #30
 8001610:	d50b      	bpl.n	800162a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001612:	f06f 0202 	mvn.w	r2, #2
 8001616:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001618:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800161a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800161c:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800161e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001620:	d077      	beq.n	8001712 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001622:	f7ff ffea 	bl	80015fa <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001626:	2300      	movs	r3, #0
 8001628:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	0750      	lsls	r0, r2, #29
 8001630:	d510      	bpl.n	8001654 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	0751      	lsls	r1, r2, #29
 8001636:	d50d      	bpl.n	8001654 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001638:	f06f 0204 	mvn.w	r2, #4
 800163c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800163e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001640:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001642:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001646:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001648:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800164a:	d068      	beq.n	800171e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800164c:	f7ff ffd5 	bl	80015fa <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001650:	2300      	movs	r3, #0
 8001652:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	0712      	lsls	r2, r2, #28
 800165a:	d50f      	bpl.n	800167c <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	0710      	lsls	r0, r2, #28
 8001660:	d50c      	bpl.n	800167c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001662:	f06f 0208 	mvn.w	r2, #8
 8001666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001668:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800166c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166e:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001670:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001672:	d05a      	beq.n	800172a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001674:	f7ff ffc1 	bl	80015fa <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001678:	2300      	movs	r3, #0
 800167a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	06d2      	lsls	r2, r2, #27
 8001682:	d510      	bpl.n	80016a6 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	06d0      	lsls	r0, r2, #27
 8001688:	d50d      	bpl.n	80016a6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800168a:	f06f 0210 	mvn.w	r2, #16
 800168e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001690:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001692:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001694:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001698:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800169a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800169c:	d04b      	beq.n	8001736 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800169e:	f7ff ffac 	bl	80015fa <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a2:	2300      	movs	r3, #0
 80016a4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	07d1      	lsls	r1, r2, #31
 80016ac:	d508      	bpl.n	80016c0 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	07d2      	lsls	r2, r2, #31
 80016b2:	d505      	bpl.n	80016c0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016b4:	f06f 0201 	mvn.w	r2, #1
 80016b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f001 ff64 	bl	8003588 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	0610      	lsls	r0, r2, #24
 80016c6:	d508      	bpl.n	80016da <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	0611      	lsls	r1, r2, #24
 80016cc:	d505      	bpl.n	80016da <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016d4:	4620      	mov	r0, r4
 80016d6:	f000 f8b6 	bl	8001846 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	0652      	lsls	r2, r2, #25
 80016e0:	d508      	bpl.n	80016f4 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	0650      	lsls	r0, r2, #25
 80016e6:	d505      	bpl.n	80016f4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff ff85 	bl	80015fe <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	0691      	lsls	r1, r2, #26
 80016fa:	d522      	bpl.n	8001742 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	0692      	lsls	r2, r2, #26
 8001700:	d51f      	bpl.n	8001742 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001702:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001706:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001708:	611a      	str	r2, [r3, #16]
    }
  }
}
 800170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800170e:	f000 b899 	b.w	8001844 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	f7ff ff71 	bl	80015f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff ff70 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
 800171c:	e783      	b.n	8001626 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	f7ff ff6b 	bl	80015f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ff6a 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
 8001728:	e792      	b.n	8001650 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172a:	f7ff ff65 	bl	80015f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff ff64 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
 8001734:	e7a0      	b.n	8001678 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001736:	f7ff ff5f 	bl	80015f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ff5e 	bl	80015fc <HAL_TIM_PWM_PulseFinishedCallback>
 8001740:	e7af      	b.n	80016a2 <HAL_TIM_IRQHandler+0xa2>
 8001742:	bd10      	pop	{r4, pc}

08001744 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001744:	4a30      	ldr	r2, [pc, #192]	; (8001808 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001746:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001748:	4290      	cmp	r0, r2
 800174a:	d012      	beq.n	8001772 <TIM_Base_SetConfig+0x2e>
 800174c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001750:	d00f      	beq.n	8001772 <TIM_Base_SetConfig+0x2e>
 8001752:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001756:	4290      	cmp	r0, r2
 8001758:	d00b      	beq.n	8001772 <TIM_Base_SetConfig+0x2e>
 800175a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175e:	4290      	cmp	r0, r2
 8001760:	d007      	beq.n	8001772 <TIM_Base_SetConfig+0x2e>
 8001762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001766:	4290      	cmp	r0, r2
 8001768:	d003      	beq.n	8001772 <TIM_Base_SetConfig+0x2e>
 800176a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800176e:	4290      	cmp	r0, r2
 8001770:	d119      	bne.n	80017a6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001772:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001778:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800177a:	4a23      	ldr	r2, [pc, #140]	; (8001808 <TIM_Base_SetConfig+0xc4>)
 800177c:	4290      	cmp	r0, r2
 800177e:	d01d      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 8001780:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001784:	d01a      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 8001786:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800178a:	4290      	cmp	r0, r2
 800178c:	d016      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 800178e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001792:	4290      	cmp	r0, r2
 8001794:	d012      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 8001796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179a:	4290      	cmp	r0, r2
 800179c:	d00e      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 800179e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80017a2:	4290      	cmp	r0, r2
 80017a4:	d00a      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <TIM_Base_SetConfig+0xc8>)
 80017a8:	4290      	cmp	r0, r2
 80017aa:	d007      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 80017ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b0:	4290      	cmp	r0, r2
 80017b2:	d003      	beq.n	80017bc <TIM_Base_SetConfig+0x78>
 80017b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b8:	4290      	cmp	r0, r2
 80017ba:	d103      	bne.n	80017c4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017c4:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80017c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80017cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ce:	688b      	ldr	r3, [r1, #8]
 80017d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017d2:	680b      	ldr	r3, [r1, #0]
 80017d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <TIM_Base_SetConfig+0xc4>)
 80017d8:	4298      	cmp	r0, r3
 80017da:	d00f      	beq.n	80017fc <TIM_Base_SetConfig+0xb8>
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d00b      	beq.n	80017fc <TIM_Base_SetConfig+0xb8>
 80017e4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80017e8:	4298      	cmp	r0, r3
 80017ea:	d007      	beq.n	80017fc <TIM_Base_SetConfig+0xb8>
 80017ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f0:	4298      	cmp	r0, r3
 80017f2:	d003      	beq.n	80017fc <TIM_Base_SetConfig+0xb8>
 80017f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f8:	4298      	cmp	r0, r3
 80017fa:	d101      	bne.n	8001800 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017fc:	690b      	ldr	r3, [r1, #16]
 80017fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001800:	2301      	movs	r3, #1
 8001802:	6143      	str	r3, [r0, #20]
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40012c00 	.word	0x40012c00
 800180c:	40014000 	.word	0x40014000

08001810 <HAL_TIM_Base_Init>:
{
 8001810:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001812:	4604      	mov	r4, r0
 8001814:	b1a0      	cbz	r0, 8001840 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001816:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800181a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800181e:	b91b      	cbnz	r3, 8001828 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001820:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001824:	f7ff fedc 	bl	80015e0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001828:	2302      	movs	r3, #2
 800182a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	1d21      	adds	r1, r4, #4
 8001832:	f7ff ff87 	bl	8001744 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001836:	2301      	movs	r3, #1
 8001838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800183c:	2000      	movs	r0, #0
 800183e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
}
 8001842:	bd10      	pop	{r4, pc}

08001844 <HAL_TIMEx_CommutationCallback>:
 8001844:	4770      	bx	lr

08001846 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001846:	4770      	bx	lr

08001848 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001848:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800184a:	69c1      	ldr	r1, [r0, #28]
{
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001850:	6883      	ldr	r3, [r0, #8]
 8001852:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001854:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001856:	4303      	orrs	r3, r0
 8001858:	6960      	ldr	r0, [r4, #20]
 800185a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800185c:	48ba      	ldr	r0, [pc, #744]	; (8001b48 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800185e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001860:	4028      	ands	r0, r5
 8001862:	4303      	orrs	r3, r0
 8001864:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001866:	6853      	ldr	r3, [r2, #4]
 8001868:	68e0      	ldr	r0, [r4, #12]
 800186a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186e:	4303      	orrs	r3, r0
 8001870:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001872:	4bb6      	ldr	r3, [pc, #728]	; (8001b4c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001874:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001876:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001878:	bf1c      	itt	ne
 800187a:	6a23      	ldrne	r3, [r4, #32]
 800187c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800187e:	6893      	ldr	r3, [r2, #8]
 8001880:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001884:	4303      	orrs	r3, r0
 8001886:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001888:	4bb1      	ldr	r3, [pc, #708]	; (8001b50 <UART_SetConfig+0x308>)
 800188a:	429a      	cmp	r2, r3
 800188c:	d119      	bne.n	80018c2 <UART_SetConfig+0x7a>
 800188e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001892:	4ab0      	ldr	r2, [pc, #704]	; (8001b54 <UART_SetConfig+0x30c>)
 8001894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001898:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800189c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	f040 8138 	bne.w	8001b16 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	f200 808f 	bhi.w	80019ca <UART_SetConfig+0x182>
 80018ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80018b0:	00ca011a 	.word	0x00ca011a
 80018b4:	008d00f9 	.word	0x008d00f9
 80018b8:	008d0114 	.word	0x008d0114
 80018bc:	008d008d 	.word	0x008d008d
 80018c0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018c2:	4ba5      	ldr	r3, [pc, #660]	; (8001b58 <UART_SetConfig+0x310>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d107      	bne.n	80018d8 <UART_SetConfig+0x90>
 80018c8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80018cc:	4aa3      	ldr	r2, [pc, #652]	; (8001b5c <UART_SetConfig+0x314>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	e7e1      	b.n	800189c <UART_SetConfig+0x54>
 80018d8:	4ba1      	ldr	r3, [pc, #644]	; (8001b60 <UART_SetConfig+0x318>)
 80018da:	429a      	cmp	r2, r3
 80018dc:	d123      	bne.n	8001926 <UART_SetConfig+0xde>
 80018de:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	f000 80f1 	beq.w	8001ad2 <UART_SetConfig+0x28a>
 80018f0:	d80b      	bhi.n	800190a <UART_SetConfig+0xc2>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80f3 	beq.w	8001ade <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 80018fc:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001900:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001904:	f000 80f8 	beq.w	8001af8 <UART_SetConfig+0x2b0>
 8001908:	e0a8      	b.n	8001a5c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800190a:	2b20      	cmp	r3, #32
 800190c:	f000 80c6 	beq.w	8001a9c <UART_SetConfig+0x254>
 8001910:	2b30      	cmp	r3, #48	; 0x30
 8001912:	d1f1      	bne.n	80018f8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001914:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001918:	f040 80b8 	bne.w	8001a8c <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800191c:	6860      	ldr	r0, [r4, #4]
 800191e:	0843      	lsrs	r3, r0, #1
 8001920:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001924:	e0c3      	b.n	8001aae <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001926:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <UART_SetConfig+0x31c>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d11e      	bne.n	800196a <UART_SetConfig+0x122>
 800192c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001934:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	f000 80bb 	beq.w	8001ab4 <UART_SetConfig+0x26c>
 800193e:	d80a      	bhi.n	8001956 <UART_SetConfig+0x10e>
 8001940:	b97b      	cbnz	r3, 8001962 <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <UART_SetConfig+0x304>)
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 80ca 	bne.w	8001ade <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800194a:	f7ff fb17 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
      break;
 800194e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001950:	bbb0      	cbnz	r0, 80019c0 <UART_SetConfig+0x178>
 8001952:	4602      	mov	r2, r0
 8001954:	e03a      	b.n	80019cc <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001956:	2b80      	cmp	r3, #128	; 0x80
 8001958:	f000 809d 	beq.w	8001a96 <UART_SetConfig+0x24e>
 800195c:	2bc0      	cmp	r3, #192	; 0xc0
 800195e:	f000 80b0 	beq.w	8001ac2 <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001962:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <UART_SetConfig+0x304>)
 8001964:	429a      	cmp	r2, r3
 8001966:	d1c7      	bne.n	80018f8 <UART_SetConfig+0xb0>
 8001968:	e02f      	b.n	80019ca <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800196a:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <UART_SetConfig+0x320>)
 800196c:	429a      	cmp	r2, r3
 800196e:	d111      	bne.n	8001994 <UART_SetConfig+0x14c>
 8001970:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001980:	f000 8098 	beq.w	8001ab4 <UART_SetConfig+0x26c>
 8001984:	d9dc      	bls.n	8001940 <UART_SetConfig+0xf8>
 8001986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198a:	f000 8084 	beq.w	8001a96 <UART_SetConfig+0x24e>
 800198e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001992:	e7e4      	b.n	800195e <UART_SetConfig+0x116>
 8001994:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <UART_SetConfig+0x304>)
 8001996:	429a      	cmp	r2, r3
 8001998:	d1ae      	bne.n	80018f8 <UART_SetConfig+0xb0>
 800199a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019aa:	f000 8083 	beq.w	8001ab4 <UART_SetConfig+0x26c>
 80019ae:	d9c7      	bls.n	8001940 <UART_SetConfig+0xf8>
 80019b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b4:	d06f      	beq.n	8001a96 <UART_SetConfig+0x24e>
 80019b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019ba:	e7d0      	b.n	800195e <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80019bc:	486b      	ldr	r0, [pc, #428]	; (8001b6c <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 80019be:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 80019c0:	6862      	ldr	r2, [r4, #4]
 80019c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80019c6:	4281      	cmp	r1, r0
 80019c8:	d905      	bls.n	80019d6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80019ca:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80019d0:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 80019d2:	4610      	mov	r0, r2
 80019d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 80019d6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80019da:	d8f6      	bhi.n	80019ca <UART_SetConfig+0x182>
        switch (clocksource)
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d82e      	bhi.n	8001a3e <UART_SetConfig+0x1f6>
 80019e0:	e8df f003 	tbb	[pc, r3]
 80019e4:	2d1c2d05 	.word	0x2d1c2d05
 80019e8:	2d2d2d24 	.word	0x2d2d2d24
 80019ec:	27          	.byte	0x27
 80019ed:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019ee:	f7ff fac5 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019f2:	6862      	ldr	r2, [r4, #4]
 80019f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f8:	0856      	lsrs	r6, r2, #1
 80019fa:	2700      	movs	r7, #0
 80019fc:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001a00:	2300      	movs	r3, #0
 8001a02:	4630      	mov	r0, r6
 8001a04:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a06:	f7fe fbe3 	bl	80001d0 <__aeabi_uldivmod>
          break;
 8001a0a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <UART_SetConfig+0x328>)
 8001a0e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001a12:	4299      	cmp	r1, r3
 8001a14:	d8d9      	bhi.n	80019ca <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	60d8      	str	r0, [r3, #12]
 8001a1a:	e7d7      	b.n	80019cc <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001a1c:	4855      	ldr	r0, [pc, #340]	; (8001b74 <UART_SetConfig+0x32c>)
 8001a1e:	0855      	lsrs	r5, r2, #1
 8001a20:	2300      	movs	r3, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a26:	f141 0100 	adc.w	r1, r1, #0
 8001a2a:	e7ec      	b.n	8001a06 <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a2c:	f7fe ff50 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
 8001a30:	e7df      	b.n	80019f2 <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a32:	0850      	lsrs	r0, r2, #1
 8001a34:	2100      	movs	r1, #0
 8001a36:	2300      	movs	r3, #0
 8001a38:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001a3c:	e7f3      	b.n	8001a26 <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 8001a3e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001a40:	2000      	movs	r0, #0
 8001a42:	e7e3      	b.n	8001a0c <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a44:	f7ff faaa 	bl	8000f9c <HAL_RCC_GetPCLK2Freq>
 8001a48:	e04e      	b.n	8001ae8 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a4a:	f7ff fa97 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a4e:	6862      	ldr	r2, [r4, #4]
 8001a50:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a58:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a5a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a5c:	f1a3 0010 	sub.w	r0, r3, #16
 8001a60:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001a64:	4288      	cmp	r0, r1
 8001a66:	d8b0      	bhi.n	80019ca <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001a68:	6821      	ldr	r1, [r4, #0]
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e7ae      	b.n	80019cc <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a6e:	f7ff fa95 	bl	8000f9c <HAL_RCC_GetPCLK2Freq>
 8001a72:	e7ec      	b.n	8001a4e <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a74:	6860      	ldr	r0, [r4, #4]
 8001a76:	0843      	lsrs	r3, r0, #1
 8001a78:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001a7c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a80:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a84:	e7e8      	b.n	8001a58 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a86:	f7fe ff23 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
 8001a8a:	e7e0      	b.n	8001a4e <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a8c:	6860      	ldr	r0, [r4, #4]
 8001a8e:	0843      	lsrs	r3, r0, #1
 8001a90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a94:	e7f4      	b.n	8001a80 <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <UART_SetConfig+0x304>)
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d08f      	beq.n	80019bc <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a9c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001aa0:	d1e8      	bne.n	8001a74 <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001aa2:	6860      	ldr	r0, [r4, #4]
 8001aa4:	0843      	lsrs	r3, r0, #1
 8001aa6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001aaa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001aae:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ab2:	e01f      	b.n	8001af4 <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001ab4:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <UART_SetConfig+0x304>)
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10b      	bne.n	8001ad2 <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001aba:	f7fe ff09 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
      break;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e746      	b.n	8001950 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <UART_SetConfig+0x304>)
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f47f af25 	bne.w	8001914 <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001aca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e776      	b.n	80019c0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ad2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ad6:	d1d6      	bne.n	8001a86 <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ad8:	f7fe fefa 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
 8001adc:	e004      	b.n	8001ae8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ade:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ae2:	d1b2      	bne.n	8001a4a <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ae4:	f7ff fa4a 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ae8:	6861      	ldr	r1, [r4, #4]
 8001aea:	084a      	lsrs	r2, r1, #1
 8001aec:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001af6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001af8:	f1a3 0010 	sub.w	r0, r3, #16
 8001afc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b00:	4288      	cmp	r0, r1
 8001b02:	f63f af62 	bhi.w	80019ca <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001b06:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001b0a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b0c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b10:	430b      	orrs	r3, r1
 8001b12:	60c3      	str	r3, [r0, #12]
 8001b14:	e75a      	b.n	80019cc <UART_SetConfig+0x184>
    switch (clocksource)
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	f63f af57 	bhi.w	80019ca <UART_SetConfig+0x182>
 8001b1c:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <UART_SetConfig+0x2dc>)
 8001b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b22:	bf00      	nop
 8001b24:	08001a4b 	.word	0x08001a4b
 8001b28:	08001a6f 	.word	0x08001a6f
 8001b2c:	08001a75 	.word	0x08001a75
 8001b30:	080019cb 	.word	0x080019cb
 8001b34:	08001a87 	.word	0x08001a87
 8001b38:	080019cb 	.word	0x080019cb
 8001b3c:	080019cb 	.word	0x080019cb
 8001b40:	080019cb 	.word	0x080019cb
 8001b44:	08001a8d 	.word	0x08001a8d
 8001b48:	efff69f3 	.word	0xefff69f3
 8001b4c:	40008000 	.word	0x40008000
 8001b50:	40013800 	.word	0x40013800
 8001b54:	08003820 	.word	0x08003820
 8001b58:	40004400 	.word	0x40004400
 8001b5c:	08003824 	.word	0x08003824
 8001b60:	40004800 	.word	0x40004800
 8001b64:	40004c00 	.word	0x40004c00
 8001b68:	40005000 	.word	0x40005000
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	000ffcff 	.word	0x000ffcff
 8001b74:	f4240000 	.word	0xf4240000

08001b78 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b7a:	07da      	lsls	r2, r3, #31
{
 8001b7c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b7e:	d506      	bpl.n	8001b8e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b80:	6801      	ldr	r1, [r0, #0]
 8001b82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001b84:	684a      	ldr	r2, [r1, #4]
 8001b86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b8a:	4322      	orrs	r2, r4
 8001b8c:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b8e:	079c      	lsls	r4, r3, #30
 8001b90:	d506      	bpl.n	8001ba0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b92:	6801      	ldr	r1, [r0, #0]
 8001b94:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b96:	684a      	ldr	r2, [r1, #4]
 8001b98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b9c:	4322      	orrs	r2, r4
 8001b9e:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ba0:	0759      	lsls	r1, r3, #29
 8001ba2:	d506      	bpl.n	8001bb2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ba4:	6801      	ldr	r1, [r0, #0]
 8001ba6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ba8:	684a      	ldr	r2, [r1, #4]
 8001baa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bae:	4322      	orrs	r2, r4
 8001bb0:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bb2:	071a      	lsls	r2, r3, #28
 8001bb4:	d506      	bpl.n	8001bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bb6:	6801      	ldr	r1, [r0, #0]
 8001bb8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001bba:	684a      	ldr	r2, [r1, #4]
 8001bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc0:	4322      	orrs	r2, r4
 8001bc2:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001bc4:	06dc      	lsls	r4, r3, #27
 8001bc6:	d506      	bpl.n	8001bd6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001bc8:	6801      	ldr	r1, [r0, #0]
 8001bca:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001bcc:	688a      	ldr	r2, [r1, #8]
 8001bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bd2:	4322      	orrs	r2, r4
 8001bd4:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001bd6:	0699      	lsls	r1, r3, #26
 8001bd8:	d506      	bpl.n	8001be8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001bda:	6801      	ldr	r1, [r0, #0]
 8001bdc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001bde:	688a      	ldr	r2, [r1, #8]
 8001be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be4:	4322      	orrs	r2, r4
 8001be6:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001be8:	065a      	lsls	r2, r3, #25
 8001bea:	d50f      	bpl.n	8001c0c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bec:	6801      	ldr	r1, [r0, #0]
 8001bee:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001bf0:	684a      	ldr	r2, [r1, #4]
 8001bf2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001bf6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bf8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bfc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bfe:	d105      	bne.n	8001c0c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c00:	684a      	ldr	r2, [r1, #4]
 8001c02:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c04:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c08:	4322      	orrs	r2, r4
 8001c0a:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	d506      	bpl.n	8001c1e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c10:	6802      	ldr	r2, [r0, #0]
 8001c12:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c14:	6853      	ldr	r3, [r2, #4]
 8001c16:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6053      	str	r3, [r2, #4]
 8001c1e:	bd10      	pop	{r4, pc}

08001c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c24:	9d06      	ldr	r5, [sp, #24]
 8001c26:	4604      	mov	r4, r0
 8001c28:	460f      	mov	r7, r1
 8001c2a:	4616      	mov	r6, r2
 8001c2c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2e:	6821      	ldr	r1, [r4, #0]
 8001c30:	69ca      	ldr	r2, [r1, #28]
 8001c32:	ea37 0302 	bics.w	r3, r7, r2
 8001c36:	bf0c      	ite	eq
 8001c38:	2201      	moveq	r2, #1
 8001c3a:	2200      	movne	r2, #0
 8001c3c:	42b2      	cmp	r2, r6
 8001c3e:	d002      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c40:	2000      	movs	r0, #0
}
 8001c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c46:	1c6b      	adds	r3, r5, #1
 8001c48:	d0f2      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c4a:	b99d      	cbnz	r5, 8001c74 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001c64:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001c6e:	2003      	movs	r0, #3
 8001c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c74:	f7fe fc4e 	bl	8000514 <HAL_GetTick>
 8001c78:	eba0 0008 	sub.w	r0, r0, r8
 8001c7c:	4285      	cmp	r5, r0
 8001c7e:	d2d6      	bcs.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xe>
 8001c80:	e7e4      	b.n	8001c4c <UART_WaitOnFlagUntilTimeout+0x2c>

08001c82 <HAL_UART_Transmit>:
{
 8001c82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c86:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001c88:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001c8c:	2b20      	cmp	r3, #32
{
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001c94:	d14a      	bne.n	8001d2c <HAL_UART_Transmit+0xaa>
    if((pData == NULL ) || (Size == 0U))
 8001c96:	2900      	cmp	r1, #0
 8001c98:	d046      	beq.n	8001d28 <HAL_UART_Transmit+0xa6>
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	d044      	beq.n	8001d28 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001c9e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d042      	beq.n	8001d2c <HAL_UART_Transmit+0xaa>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb0:	2321      	movs	r3, #33	; 0x21
 8001cb2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001cb6:	f7fe fc2d 	bl	8000514 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001cba:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001cbe:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001cc0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001cc4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc8:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8001cca:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ccc:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8001cce:	b952      	cbnz	r2, 8001ce6 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff ffa4 	bl	8001c20 <UART_WaitOnFlagUntilTimeout>
 8001cd8:	b958      	cbnz	r0, 8001cf2 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001ce0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001ce4:	e006      	b.n	8001cf4 <HAL_UART_Transmit+0x72>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff ff98 	bl	8001c20 <UART_WaitOnFlagUntilTimeout>
 8001cf0:	b118      	cbz	r0, 8001cfa <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001cf2:	2003      	movs	r0, #3
}
 8001cf4:	b002      	add	sp, #8
 8001cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cfa:	68a3      	ldr	r3, [r4, #8]
 8001cfc:	6822      	ldr	r2, [r4, #0]
 8001cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d02:	d10d      	bne.n	8001d20 <HAL_UART_Transmit+0x9e>
 8001d04:	6923      	ldr	r3, [r4, #16]
 8001d06:	b95b      	cbnz	r3, 8001d20 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001d08:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001d12:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001d1e:	e7d1      	b.n	8001cc4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001d20:	782b      	ldrb	r3, [r5, #0]
 8001d22:	8513      	strh	r3, [r2, #40]	; 0x28
 8001d24:	3501      	adds	r5, #1
 8001d26:	e7f4      	b.n	8001d12 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
 8001d2a:	e7e3      	b.n	8001cf4 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	e7e1      	b.n	8001cf4 <HAL_UART_Transmit+0x72>

08001d30 <HAL_UART_Receive>:
{
 8001d30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d34:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d36:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8001d3a:	2b20      	cmp	r3, #32
{
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	460d      	mov	r5, r1
 8001d40:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d42:	d160      	bne.n	8001e06 <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d05c      	beq.n	8001e02 <HAL_UART_Receive+0xd2>
 8001d48:	2a00      	cmp	r2, #0
 8001d4a:	d05a      	beq.n	8001e02 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8001d4c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d058      	beq.n	8001e06 <HAL_UART_Receive+0xd6>
 8001d54:	2301      	movs	r3, #1
 8001d56:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d5e:	2322      	movs	r3, #34	; 0x22
 8001d60:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8001d64:	f7fe fbd6 	bl	8000514 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001d68:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8001d6a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001d72:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001d74:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001d78:	d115      	bne.n	8001da6 <HAL_UART_Receive+0x76>
 8001d7a:	6923      	ldr	r3, [r4, #16]
 8001d7c:	b98b      	cbnz	r3, 8001da2 <HAL_UART_Receive+0x72>
 8001d7e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001d82:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001d86:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8001d8a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001d8e:	b280      	uxth	r0, r0
 8001d90:	b9b8      	cbnz	r0, 8001dc2 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001d92:	2320      	movs	r3, #32
 8001d94:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8001d98:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001d9c:	b002      	add	sp, #8
 8001d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001da2:	23ff      	movs	r3, #255	; 0xff
 8001da4:	e7ed      	b.n	8001d82 <HAL_UART_Receive+0x52>
 8001da6:	b923      	cbnz	r3, 8001db2 <HAL_UART_Receive+0x82>
 8001da8:	6923      	ldr	r3, [r4, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f9      	beq.n	8001da2 <HAL_UART_Receive+0x72>
 8001dae:	237f      	movs	r3, #127	; 0x7f
 8001db0:	e7e7      	b.n	8001d82 <HAL_UART_Receive+0x52>
 8001db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001db6:	d1e6      	bne.n	8001d86 <HAL_UART_Receive+0x56>
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f7      	beq.n	8001dae <HAL_UART_Receive+0x7e>
 8001dbe:	233f      	movs	r3, #63	; 0x3f
 8001dc0:	e7df      	b.n	8001d82 <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	f8cd 8000 	str.w	r8, [sp]
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff27 	bl	8001c20 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	b9d0      	cbnz	r0, 8001e0a <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd4:	68a3      	ldr	r3, [r4, #8]
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	d10c      	bne.n	8001df8 <HAL_UART_Receive+0xc8>
 8001dde:	6922      	ldr	r2, [r4, #16]
 8001de0:	b952      	cbnz	r2, 8001df8 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001de2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001de4:	4033      	ands	r3, r6
 8001de6:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001dea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8001df6:	e7c8      	b.n	8001d8a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001df8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001dfa:	4033      	ands	r3, r6
 8001dfc:	702b      	strb	r3, [r5, #0]
 8001dfe:	3501      	adds	r5, #1
 8001e00:	e7f3      	b.n	8001dea <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e7ca      	b.n	8001d9c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8001e06:	2002      	movs	r0, #2
 8001e08:	e7c8      	b.n	8001d9c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	e7c6      	b.n	8001d9c <HAL_UART_Receive+0x6c>

08001e0e <UART_CheckIdleState>:
{
 8001e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e10:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e12:	2600      	movs	r6, #0
 8001e14:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001e16:	f7fe fb7d 	bl	8000514 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001e20:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e22:	d417      	bmi.n	8001e54 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	075b      	lsls	r3, r3, #29
 8001e2a:	d50a      	bpl.n	8001e42 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	462b      	mov	r3, r5
 8001e36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fef0 	bl	8001c20 <UART_WaitOnFlagUntilTimeout>
 8001e40:	b9a0      	cbnz	r0, 8001e6c <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8001e42:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e44:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e46:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001e4a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8001e4e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001e52:	e00c      	b.n	8001e6e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4632      	mov	r2, r6
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fedc 	bl	8001c20 <UART_WaitOnFlagUntilTimeout>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d0db      	beq.n	8001e24 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e6c:	2003      	movs	r0, #3
}
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd70      	pop	{r4, r5, r6, pc}

08001e72 <HAL_UART_Init>:
{
 8001e72:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e74:	4604      	mov	r4, r0
 8001e76:	b360      	cbz	r0, 8001ed2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e78:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001e7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e80:	b91b      	cbnz	r3, 8001e8a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e82:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001e86:	f001 fbcf 	bl	8003628 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e8a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	2324      	movs	r3, #36	; 0x24
 8001e8e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fcd4 	bl	8001848 <UART_SetConfig>
 8001ea0:	2801      	cmp	r0, #1
 8001ea2:	d016      	beq.n	8001ed2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ea6:	b113      	cbz	r3, 8001eae <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff fe65 	bl	8001b78 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ebe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001ec6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001ece:	f7ff bf9e 	b.w	8001e0e <UART_CheckIdleState>
}
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	bd10      	pop	{r4, pc}

08001ed6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001ed6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001ed8:	f000 fe62 	bl	8002ba0 <vTaskStartScheduler>
  
  return osOK;
}
 8001edc:	2000      	movs	r0, #0
 8001ede:	bd08      	pop	{r3, pc}

08001ee0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ee0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ee2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001ee6:	8a02      	ldrh	r2, [r0, #16]
{
 8001ee8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eea:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001eee:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001ef0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001ef2:	bf14      	ite	ne
 8001ef4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ef6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ef8:	a803      	add	r0, sp, #12
 8001efa:	9001      	str	r0, [sp, #4]
 8001efc:	9400      	str	r4, [sp, #0]
 8001efe:	4628      	mov	r0, r5
 8001f00:	f000 fd7e 	bl	8002a00 <xTaskCreate>
 8001f04:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f06:	bf0c      	ite	eq
 8001f08:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001f0a:	2000      	movne	r0, #0
}
 8001f0c:	b005      	add	sp, #20
 8001f0e:	bd30      	pop	{r4, r5, pc}

08001f10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f10:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f12:	2800      	cmp	r0, #0
 8001f14:	bf08      	it	eq
 8001f16:	2001      	moveq	r0, #1
 8001f18:	f000 ff90 	bl	8002e3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	bd08      	pop	{r3, pc}

08001f20 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001f20:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f22:	f001 f8cf 	bl	80030c4 <xTaskGetSchedulerState>
 8001f26:	2801      	cmp	r0, #1
 8001f28:	d003      	beq.n	8001f32 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001f2e:	f000 b909 	b.w	8002144 <xPortSysTickHandler>
 8001f32:	bd08      	pop	{r3, pc}

08001f34 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f34:	f100 0308 	add.w	r3, r0, #8
 8001f38:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f3e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f40:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f42:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f44:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f46:	6003      	str	r3, [r0, #0]
 8001f48:	4770      	bx	lr

08001f4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6103      	str	r3, [r0, #16]
 8001f4e:	4770      	bx	lr

08001f50 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f50:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f5c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f5e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f60:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f62:	3301      	adds	r3, #1
 8001f64:	6003      	str	r3, [r0, #0]
 8001f66:	4770      	bx	lr

08001f68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f68:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f6a:	1c53      	adds	r3, r2, #1
{
 8001f6c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001f6e:	d10a      	bne.n	8001f86 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f70:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f76:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f78:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f7a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f7c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f7e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f80:	3301      	adds	r3, #1
 8001f82:	6003      	str	r3, [r0, #0]
 8001f84:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f86:	f100 0308 	add.w	r3, r0, #8
 8001f8a:	685c      	ldr	r4, [r3, #4]
 8001f8c:	6825      	ldr	r5, [r4, #0]
 8001f8e:	42aa      	cmp	r2, r5
 8001f90:	d3ef      	bcc.n	8001f72 <vListInsert+0xa>
 8001f92:	4623      	mov	r3, r4
 8001f94:	e7f9      	b.n	8001f8a <vListInsert+0x22>

08001f96 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f96:	6841      	ldr	r1, [r0, #4]
 8001f98:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f9a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f9c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f9e:	6882      	ldr	r2, [r0, #8]
 8001fa0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fa6:	bf08      	it	eq
 8001fa8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001faa:	2200      	movs	r2, #0
 8001fac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	3801      	subs	r0, #1
 8001fb2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <prvTaskExitError+0x2c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	d008      	beq.n	8001fd2 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	e7fe      	b.n	8001fd0 <prvTaskExitError+0x18>
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	e7fe      	b.n	8001fe2 <prvTaskExitError+0x2a>
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001fe8:	4806      	ldr	r0, [pc, #24]	; (8002004 <prvPortStartFirstTask+0x1c>)
 8001fea:	6800      	ldr	r0, [r0, #0]
 8001fec:	6800      	ldr	r0, [r0, #0]
 8001fee:	f380 8808 	msr	MSP, r0
 8001ff2:	b662      	cpsie	i
 8001ff4:	b661      	cpsie	f
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	df00      	svc	0
 8002000:	bf00      	nop
 8002002:	0000      	.short	0x0000
 8002004:	e000ed08 	.word	0xe000ed08

08002008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002008:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002018 <vPortEnableVFP+0x10>
 800200c:	6801      	ldr	r1, [r0, #0]
 800200e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002012:	6001      	str	r1, [r0, #0]
 8002014:	4770      	bx	lr
 8002016:	0000      	.short	0x0000
 8002018:	e000ed88 	.word	0xe000ed88

0800201c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <pxPortInitialiseStack+0x28>)
 8002026:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800202a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800202e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002032:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002036:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800203a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800203e:	3844      	subs	r0, #68	; 0x44
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	08001fb9 	.word	0x08001fb9
	...

08002050 <SVC_Handler>:
	__asm volatile (
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <pxCurrentTCBConst2>)
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	6808      	ldr	r0, [r1, #0]
 8002056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205a:	f380 8809 	msr	PSP, r0
 800205e:	f3bf 8f6f 	isb	sy
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f380 8811 	msr	BASEPRI, r0
 800206a:	4770      	bx	lr
 800206c:	f3af 8000 	nop.w

08002070 <pxCurrentTCBConst2>:
 8002070:	20001044 	.word	0x20001044

08002074 <vPortEnterCritical>:
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <vPortEnterCritical+0x3c>)
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800208a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800208c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800208e:	d10d      	bne.n	80020ac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <vPortEnterCritical+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002098:	d008      	beq.n	80020ac <vPortEnterCritical+0x38>
 800209a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209e:	f383 8811 	msr	BASEPRI, r3
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	f3bf 8f4f 	dsb	sy
 80020aa:	e7fe      	b.n	80020aa <vPortEnterCritical+0x36>
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <vPortExitCritical+0x24>)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	b943      	cbnz	r3, 80020d0 <vPortExitCritical+0x18>
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	e7fe      	b.n	80020ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80020d0:	3b01      	subs	r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80020d4:	b90b      	cbnz	r3, 80020da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	4770      	bx	lr
 80020dc:	20000000 	.word	0x20000000

080020e0 <PendSV_Handler>:
	__asm volatile
 80020e0:	f3ef 8009 	mrs	r0, PSP
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <pxCurrentTCBConst>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f01e 0f10 	tst.w	lr, #16
 80020f0:	bf08      	it	eq
 80020f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fa:	6010      	str	r0, [r2, #0]
 80020fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002104:	f380 8811 	msr	BASEPRI, r0
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f000 fef2 	bl	8002ef8 <vTaskSwitchContext>
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f380 8811 	msr	BASEPRI, r0
 800211c:	bc08      	pop	{r3}
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	6808      	ldr	r0, [r1, #0]
 8002122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002126:	f01e 0f10 	tst.w	lr, #16
 800212a:	bf08      	it	eq
 800212c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002130:	f380 8809 	msr	PSP, r0
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	f3af 8000 	nop.w

08002140 <pxCurrentTCBConst>:
 8002140:	20001044 	.word	0x20001044

08002144 <xPortSysTickHandler>:
{
 8002144:	b508      	push	{r3, lr}
	__asm volatile
 8002146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002156:	f000 fd67 	bl	8002c28 <xTaskIncrementTick>
 800215a:	b118      	cbz	r0, 8002164 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <xPortSysTickHandler+0x28>)
 800215e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002162:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002164:	2300      	movs	r3, #0
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	bd08      	pop	{r3, pc}
 800216c:	e000ed04 	.word	0xe000ed04

08002170 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <vPortSetupTimerInterrupt+0x1c>)
 8002172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fbb3 f3f2 	udiv	r3, r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <vPortSetupTimerInterrupt+0x20>)
 800217e:	3b01      	subs	r3, #1
 8002180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <vPortSetupTimerInterrupt+0x24>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000004 	.word	0x20000004
 8002190:	e000e014 	.word	0xe000e014
 8002194:	e000e010 	.word	0xe000e010

08002198 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <xPortStartScheduler+0xc8>)
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <xPortStartScheduler+0xcc>)
{
 800219c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	4291      	cmp	r1, r2
 80021a2:	d108      	bne.n	80021b6 <xPortStartScheduler+0x1e>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	e7fe      	b.n	80021b4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <xPortStartScheduler+0xd0>)
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d108      	bne.n	80021d0 <xPortStartScheduler+0x38>
 80021be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	e7fe      	b.n	80021ce <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <xPortStartScheduler+0xd4>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021dc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80021ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <xPortStartScheduler+0xdc>)
 80021f2:	2207      	movs	r2, #7
 80021f4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021f6:	2100      	movs	r1, #0
 80021f8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80021fc:	0600      	lsls	r0, r0, #24
 80021fe:	f102 34ff 	add.w	r4, r2, #4294967295
 8002202:	d423      	bmi.n	800224c <xPortStartScheduler+0xb4>
 8002204:	b101      	cbz	r1, 8002208 <xPortStartScheduler+0x70>
 8002206:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800220c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002210:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <xPortStartScheduler+0xd4>)
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <xPortStartScheduler+0xe0>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002222:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800222a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800222c:	f7ff ffa0 	bl	8002170 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <xPortStartScheduler+0xe4>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002236:	f7ff fee7 	bl	8002008 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <xPortStartScheduler+0xe8>)
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002242:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002244:	f7ff fed0 	bl	8001fe8 <prvPortStartFirstTask>
	prvTaskExitError();
 8002248:	f7ff feb6 	bl	8001fb8 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800224c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002250:	0052      	lsls	r2, r2, #1
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f88d 2003 	strb.w	r2, [sp, #3]
 8002258:	2101      	movs	r1, #1
 800225a:	4622      	mov	r2, r4
 800225c:	e7cc      	b.n	80021f8 <xPortStartScheduler+0x60>
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	410fc271 	.word	0x410fc271
 8002268:	410fc270 	.word	0x410fc270
 800226c:	e000e400 	.word	0xe000e400
 8002270:	20000024 	.word	0x20000024
 8002274:	20000028 	.word	0x20000028
 8002278:	e000ed20 	.word	0xe000ed20
 800227c:	20000000 	.word	0x20000000
 8002280:	e000ef34 	.word	0xe000ef34

08002284 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002284:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <prvInsertBlockIntoFreeList+0x40>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4282      	cmp	r2, r0
 800228c:	d318      	bcc.n	80022c0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800228e:	685c      	ldr	r4, [r3, #4]
 8002290:	1919      	adds	r1, r3, r4
 8002292:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002294:	bf01      	itttt	eq
 8002296:	6841      	ldreq	r1, [r0, #4]
 8002298:	4618      	moveq	r0, r3
 800229a:	1909      	addeq	r1, r1, r4
 800229c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800229e:	6844      	ldr	r4, [r0, #4]
 80022a0:	1901      	adds	r1, r0, r4
 80022a2:	428a      	cmp	r2, r1
 80022a4:	d107      	bne.n	80022b6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <prvInsertBlockIntoFreeList+0x44>)
 80022a8:	6809      	ldr	r1, [r1, #0]
 80022aa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022ac:	bf1f      	itttt	ne
 80022ae:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80022b0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022b2:	1909      	addne	r1, r1, r4
 80022b4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80022b6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80022b8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80022ba:	bf18      	it	ne
 80022bc:	6018      	strne	r0, [r3, #0]
 80022be:	bd10      	pop	{r4, pc}
 80022c0:	4613      	mov	r3, r2
 80022c2:	e7e1      	b.n	8002288 <prvInsertBlockIntoFreeList+0x4>
 80022c4:	2000103c 	.word	0x2000103c
 80022c8:	2000002c 	.word	0x2000002c

080022cc <pvPortMalloc>:
{
 80022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80022d2:	f000 fca1 	bl	8002c18 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80022d6:	493e      	ldr	r1, [pc, #248]	; (80023d0 <pvPortMalloc+0x104>)
 80022d8:	4d3e      	ldr	r5, [pc, #248]	; (80023d4 <pvPortMalloc+0x108>)
 80022da:	680b      	ldr	r3, [r1, #0]
 80022dc:	bb0b      	cbnz	r3, 8002322 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80022de:	4a3e      	ldr	r2, [pc, #248]	; (80023d8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022e0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022e2:	bf1f      	itttt	ne
 80022e4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022e6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022ea:	f502 5380 	addne.w	r3, r2, #4096	; 0x1000
 80022ee:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022f0:	bf14      	ite	ne
 80022f2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022f4:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022f8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80022fa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022fc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002300:	4e36      	ldr	r6, [pc, #216]	; (80023dc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002302:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002304:	2000      	movs	r0, #0
 8002306:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002308:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800230a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800230c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800230e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002310:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002314:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002316:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <pvPortMalloc+0x118>)
 800231a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800231c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002320:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002322:	682f      	ldr	r7, [r5, #0]
 8002324:	4227      	tst	r7, r4
 8002326:	d116      	bne.n	8002356 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002328:	2c00      	cmp	r4, #0
 800232a:	d041      	beq.n	80023b0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800232c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002330:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002332:	bf1c      	itt	ne
 8002334:	f023 0307 	bicne.w	r3, r3, #7
 8002338:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800233a:	b163      	cbz	r3, 8002356 <pvPortMalloc+0x8a>
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <pvPortMalloc+0x118>)
 800233e:	6816      	ldr	r6, [r2, #0]
 8002340:	42b3      	cmp	r3, r6
 8002342:	4690      	mov	r8, r2
 8002344:	d807      	bhi.n	8002356 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <pvPortMalloc+0x110>)
 8002348:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800234a:	6868      	ldr	r0, [r5, #4]
 800234c:	4283      	cmp	r3, r0
 800234e:	d804      	bhi.n	800235a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002350:	6809      	ldr	r1, [r1, #0]
 8002352:	428d      	cmp	r5, r1
 8002354:	d107      	bne.n	8002366 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002356:	2400      	movs	r4, #0
 8002358:	e02a      	b.n	80023b0 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800235a:	682c      	ldr	r4, [r5, #0]
 800235c:	2c00      	cmp	r4, #0
 800235e:	d0f7      	beq.n	8002350 <pvPortMalloc+0x84>
 8002360:	462a      	mov	r2, r5
 8002362:	4625      	mov	r5, r4
 8002364:	e7f1      	b.n	800234a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002366:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002368:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800236a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800236c:	1ac2      	subs	r2, r0, r3
 800236e:	2a10      	cmp	r2, #16
 8002370:	d90f      	bls.n	8002392 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002372:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002374:	0741      	lsls	r1, r0, #29
 8002376:	d008      	beq.n	800238a <pvPortMalloc+0xbe>
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	e7fe      	b.n	8002388 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800238a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800238c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800238e:	f7ff ff79 	bl	8002284 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002392:	4913      	ldr	r1, [pc, #76]	; (80023e0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002394:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002396:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002398:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800239a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800239c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800239e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023a2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023a6:	bf38      	it	cc
 80023a8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023aa:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023ac:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80023ae:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80023b0:	f000 fccc 	bl	8002d4c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023b4:	0763      	lsls	r3, r4, #29
 80023b6:	d008      	beq.n	80023ca <pvPortMalloc+0xfe>
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	e7fe      	b.n	80023c8 <pvPortMalloc+0xfc>
}
 80023ca:	4620      	mov	r0, r4
 80023cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d0:	2000002c 	.word	0x2000002c
 80023d4:	20001030 	.word	0x20001030
 80023d8:	20000030 	.word	0x20000030
 80023dc:	2000103c 	.word	0x2000103c
 80023e0:	20001038 	.word	0x20001038
 80023e4:	20001034 	.word	0x20001034

080023e8 <vPortFree>:
{
 80023e8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80023ea:	4604      	mov	r4, r0
 80023ec:	b370      	cbz	r0, 800244c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <vPortFree+0x68>)
 80023f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	4213      	tst	r3, r2
 80023f8:	d108      	bne.n	800240c <vPortFree+0x24>
 80023fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	e7fe      	b.n	800240a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800240c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002410:	b141      	cbz	r1, 8002424 <vPortFree+0x3c>
 8002412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	e7fe      	b.n	8002422 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002424:	ea23 0302 	bic.w	r3, r3, r2
 8002428:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800242c:	f000 fbf4 	bl	8002c18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <vPortFree+0x6c>)
 8002432:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002436:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002438:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800243c:	440b      	add	r3, r1
 800243e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002440:	f7ff ff20 	bl	8002284 <prvInsertBlockIntoFreeList>
}
 8002444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002448:	f000 bc80 	b.w	8002d4c <xTaskResumeAll>
 800244c:	bd10      	pop	{r4, pc}
 800244e:	bf00      	nop
 8002450:	20001030 	.word	0x20001030
 8002454:	20001034 	.word	0x20001034

08002458 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800245c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800245e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002460:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002462:	b942      	cbnz	r2, 8002476 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002464:	6805      	ldr	r5, [r0, #0]
 8002466:	b99d      	cbnz	r5, 8002490 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002468:	6840      	ldr	r0, [r0, #4]
 800246a:	f000 fe81 	bl	8003170 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800246e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002470:	3601      	adds	r6, #1
 8002472:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002474:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002476:	b96d      	cbnz	r5, 8002494 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002478:	6880      	ldr	r0, [r0, #8]
 800247a:	f001 f9af 	bl	80037dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800247e:	68a3      	ldr	r3, [r4, #8]
 8002480:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002482:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002484:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002486:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002488:	4293      	cmp	r3, r2
 800248a:	d301      	bcc.n	8002490 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002490:	2000      	movs	r0, #0
 8002492:	e7ed      	b.n	8002470 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002494:	68c0      	ldr	r0, [r0, #12]
 8002496:	f001 f9a1 	bl	80037dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800249a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800249c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800249e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024a0:	425b      	negs	r3, r3
 80024a2:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024a4:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024a6:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80024a8:	bf3e      	ittt	cc
 80024aa:	6862      	ldrcc	r2, [r4, #4]
 80024ac:	189b      	addcc	r3, r3, r2
 80024ae:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80024b0:	2d02      	cmp	r5, #2
 80024b2:	d1ed      	bne.n	8002490 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024b4:	b10e      	cbz	r6, 80024ba <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80024b6:	3e01      	subs	r6, #1
 80024b8:	e7ea      	b.n	8002490 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80024ba:	4630      	mov	r0, r6
 80024bc:	e7d8      	b.n	8002470 <prvCopyDataToQueue+0x18>

080024be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024be:	4603      	mov	r3, r0
 80024c0:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80024c4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024c6:	b162      	cbz	r2, 80024e2 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024c8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024ca:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024cc:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024ce:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024d0:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024d2:	bf24      	itt	cs
 80024d4:	6819      	ldrcs	r1, [r3, #0]
 80024d6:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024d8:	68d9      	ldr	r1, [r3, #12]
	}
}
 80024da:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024de:	f001 b97d 	b.w	80037dc <memcpy>
}
 80024e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80024ec:	f7ff fdc2 	bl	8002074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80024f0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80024f8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	dc14      	bgt.n	8002528 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80024fe:	23ff      	movs	r3, #255	; 0xff
 8002500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002504:	f7ff fdd8 	bl	80020b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002508:	f7ff fdb4 	bl	8002074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800250c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002510:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002514:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002516:	2d00      	cmp	r5, #0
 8002518:	dc12      	bgt.n	8002540 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800251a:	23ff      	movs	r3, #255	; 0xff
 800251c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002524:	f7ff bdc8 	b.w	80020b8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0e7      	beq.n	80024fe <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800252e:	4630      	mov	r0, r6
 8002530:	f000 fd36 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002534:	b108      	cbz	r0, 800253a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002536:	f000 fdbf 	bl	80030b8 <vTaskMissedYield>
 800253a:	3d01      	subs	r5, #1
 800253c:	b26d      	sxtb	r5, r5
 800253e:	e7dc      	b.n	80024fa <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002540:	6923      	ldr	r3, [r4, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0e9      	beq.n	800251a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002546:	4630      	mov	r0, r6
 8002548:	f000 fd2a 	bl	8002fa0 <xTaskRemoveFromEventList>
 800254c:	b108      	cbz	r0, 8002552 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800254e:	f000 fdb3 	bl	80030b8 <vTaskMissedYield>
 8002552:	3d01      	subs	r5, #1
 8002554:	b26d      	sxtb	r5, r5
 8002556:	e7de      	b.n	8002516 <prvUnlockQueue+0x2e>

08002558 <xQueueGenericReset>:
{
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800255c:	4604      	mov	r4, r0
 800255e:	b940      	cbnz	r0, 8002572 <xQueueGenericReset+0x1a>
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	e7fe      	b.n	8002570 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002572:	f7ff fd7f 	bl	8002074 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002576:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002578:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800257a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800257c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800257e:	4343      	muls	r3, r0
 8002580:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002582:	1a1b      	subs	r3, r3, r0
 8002584:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002586:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002588:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800258a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800258c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800258e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002590:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002594:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002598:	b995      	cbnz	r5, 80025c0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	b163      	cbz	r3, 80025b8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800259e:	f104 0010 	add.w	r0, r4, #16
 80025a2:	f000 fcfd 	bl	8002fa0 <xTaskRemoveFromEventList>
 80025a6:	b138      	cbz	r0, 80025b8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <xQueueGenericReset+0x7c>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80025b8:	f7ff fd7e 	bl	80020b8 <vPortExitCritical>
}
 80025bc:	2001      	movs	r0, #1
 80025be:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025c0:	f104 0010 	add.w	r0, r4, #16
 80025c4:	f7ff fcb6 	bl	8001f34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025cc:	f7ff fcb2 	bl	8001f34 <vListInitialise>
 80025d0:	e7f2      	b.n	80025b8 <xQueueGenericReset+0x60>
 80025d2:	bf00      	nop
 80025d4:	e000ed04 	.word	0xe000ed04

080025d8 <xQueueGenericCreate>:
	{
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025dc:	4606      	mov	r6, r0
 80025de:	b940      	cbnz	r0, 80025f2 <xQueueGenericCreate+0x1a>
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80025f4:	3048      	adds	r0, #72	; 0x48
 80025f6:	f7ff fe69 	bl	80022cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80025fa:	4604      	mov	r4, r0
 80025fc:	b138      	cbz	r0, 800260e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80025fe:	b945      	cbnz	r5, 8002612 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002600:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002602:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002604:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002606:	2101      	movs	r1, #1
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff ffa5 	bl	8002558 <xQueueGenericReset>
	}
 800260e:	4620      	mov	r0, r4
 8002610:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002612:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002616:	6003      	str	r3, [r0, #0]
 8002618:	e7f3      	b.n	8002602 <xQueueGenericCreate+0x2a>
	...

0800261c <xQueueGenericSend>:
{
 800261c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002620:	4689      	mov	r9, r1
 8002622:	9201      	str	r2, [sp, #4]
 8002624:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002626:	4604      	mov	r4, r0
 8002628:	b940      	cbnz	r0, 800263c <xQueueGenericSend+0x20>
 800262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	e7fe      	b.n	800263a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800263c:	2900      	cmp	r1, #0
 800263e:	f040 8088 	bne.w	8002752 <xQueueGenericSend+0x136>
 8002642:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8084 	beq.w	8002752 <xQueueGenericSend+0x136>
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	e7fe      	b.n	800265a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800265c:	9e01      	ldr	r6, [sp, #4]
 800265e:	2e00      	cmp	r6, #0
 8002660:	f000 8082 	beq.w	8002768 <xQueueGenericSend+0x14c>
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	e7fe      	b.n	8002674 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002676:	9d01      	ldr	r5, [sp, #4]
 8002678:	b91d      	cbnz	r5, 8002682 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800267a:	f7ff fd1d 	bl	80020b8 <vPortExitCritical>
			return errQUEUE_FULL;
 800267e:	2000      	movs	r0, #0
 8002680:	e058      	b.n	8002734 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002682:	b916      	cbnz	r6, 800268a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002684:	a802      	add	r0, sp, #8
 8002686:	f000 fccd 	bl	8003024 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800268a:	f7ff fd15 	bl	80020b8 <vPortExitCritical>
		vTaskSuspendAll();
 800268e:	f000 fac3 	bl	8002c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002692:	f7ff fcef 	bl	8002074 <vPortEnterCritical>
 8002696:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	bf08      	it	eq
 800269e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80026a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80026a6:	2bff      	cmp	r3, #255	; 0xff
 80026a8:	bf08      	it	eq
 80026aa:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80026ae:	f7ff fd03 	bl	80020b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b2:	a901      	add	r1, sp, #4
 80026b4:	a802      	add	r0, sp, #8
 80026b6:	f000 fcc5 	bl	8003044 <xTaskCheckForTimeOut>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d143      	bne.n	8002746 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026be:	f7ff fcd9 	bl	8002074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80026c4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80026c6:	f7ff fcf7 	bl	80020b8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026ca:	42ae      	cmp	r6, r5
 80026cc:	d135      	bne.n	800273a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ce:	9901      	ldr	r1, [sp, #4]
 80026d0:	f104 0010 	add.w	r0, r4, #16
 80026d4:	f000 fc4a 	bl	8002f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ff05 	bl	80024e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026de:	f000 fb35 	bl	8002d4c <xTaskResumeAll>
 80026e2:	b938      	cbnz	r0, 80026f4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80026e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026e8:	f8ca 3000 	str.w	r3, [sl]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80026f6:	f7ff fcbd 	bl	8002074 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026fe:	429a      	cmp	r2, r3
 8002700:	d301      	bcc.n	8002706 <xQueueGenericSend+0xea>
 8002702:	2f02      	cmp	r7, #2
 8002704:	d1b7      	bne.n	8002676 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002706:	463a      	mov	r2, r7
 8002708:	4649      	mov	r1, r9
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff fea4 	bl	8002458 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002712:	b11b      	cbz	r3, 800271c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002714:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002718:	f000 fc42 	bl	8002fa0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800271c:	b138      	cbz	r0, 800272e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <xQueueGenericSend+0x168>)
 8002720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800272e:	f7ff fcc3 	bl	80020b8 <vPortExitCritical>
				return pdPASS;
 8002732:	2001      	movs	r0, #1
}
 8002734:	b004      	add	sp, #16
 8002736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff fed4 	bl	80024e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002740:	f000 fb04 	bl	8002d4c <xTaskResumeAll>
 8002744:	e7d6      	b.n	80026f4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff fece 	bl	80024e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800274c:	f000 fafe 	bl	8002d4c <xTaskResumeAll>
 8002750:	e795      	b.n	800267e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002752:	2f02      	cmp	r7, #2
 8002754:	d102      	bne.n	800275c <xQueueGenericSend+0x140>
 8002756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10a      	bne.n	8002772 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800275c:	f000 fcb2 	bl	80030c4 <xTaskGetSchedulerState>
 8002760:	2800      	cmp	r0, #0
 8002762:	f43f af7b 	beq.w	800265c <xQueueGenericSend+0x40>
 8002766:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002768:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800276c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002784 <xQueueGenericSend+0x168>
 8002770:	e7c1      	b.n	80026f6 <xQueueGenericSend+0xda>
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	e7fe      	b.n	8002782 <xQueueGenericSend+0x166>
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <xQueueGenericReceive>:
{
 8002788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	4688      	mov	r8, r1
 800278e:	9201      	str	r2, [sp, #4]
 8002790:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8002792:	4604      	mov	r4, r0
 8002794:	b940      	cbnz	r0, 80027a8 <xQueueGenericReceive+0x20>
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	e7fe      	b.n	80027a6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a8:	2900      	cmp	r1, #0
 80027aa:	f040 80a5 	bne.w	80028f8 <xQueueGenericReceive+0x170>
 80027ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a1 	beq.w	80028f8 <xQueueGenericReceive+0x170>
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	e7fe      	b.n	80027c6 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c8:	9e01      	ldr	r6, [sp, #4]
 80027ca:	2e00      	cmp	r6, #0
 80027cc:	f000 809a 	beq.w	8002904 <xQueueGenericReceive+0x17c>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	e7fe      	b.n	80027e0 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80027e4:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d06d      	beq.n	80028c6 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027ee:	e05f      	b.n	80028b0 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 80027f0:	9d01      	ldr	r5, [sp, #4]
 80027f2:	b91d      	cbnz	r5, 80027fc <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 80027f4:	f7ff fc60 	bl	80020b8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80027f8:	4628      	mov	r0, r5
 80027fa:	e067      	b.n	80028cc <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80027fc:	b916      	cbnz	r6, 8002804 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 80027fe:	a802      	add	r0, sp, #8
 8002800:	f000 fc10 	bl	8003024 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002804:	f7ff fc58 	bl	80020b8 <vPortExitCritical>
		vTaskSuspendAll();
 8002808:	f000 fa06 	bl	8002c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800280c:	f7ff fc32 	bl	8002074 <vPortEnterCritical>
 8002810:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002814:	2bff      	cmp	r3, #255	; 0xff
 8002816:	bf08      	it	eq
 8002818:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800281c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002820:	2bff      	cmp	r3, #255	; 0xff
 8002822:	bf08      	it	eq
 8002824:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002828:	f7ff fc46 	bl	80020b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800282c:	a901      	add	r1, sp, #4
 800282e:	a802      	add	r0, sp, #8
 8002830:	f000 fc08 	bl	8003044 <xTaskCheckForTimeOut>
 8002834:	2800      	cmp	r0, #0
 8002836:	d152      	bne.n	80028de <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8002838:	f7ff fc1c 	bl	8002074 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800283c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800283e:	f7ff fc3b 	bl	80020b8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002842:	2d00      	cmp	r5, #0
 8002844:	d145      	bne.n	80028d2 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	b933      	cbnz	r3, 8002858 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800284a:	f7ff fc13 	bl	8002074 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800284e:	6860      	ldr	r0, [r4, #4]
 8002850:	f000 fc48 	bl	80030e4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002854:	f7ff fc30 	bl	80020b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002858:	9901      	ldr	r1, [sp, #4]
 800285a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800285e:	f000 fb85 	bl	8002f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002862:	4620      	mov	r0, r4
 8002864:	f7ff fe40 	bl	80024e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002868:	f000 fa70 	bl	8002d4c <xTaskResumeAll>
 800286c:	b938      	cbnz	r0, 800287e <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 800286e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002872:	f8ca 3000 	str.w	r3, [sl]
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002880:	f7ff fbf8 	bl	8002074 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002884:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002886:	2d00      	cmp	r5, #0
 8002888:	d0b2      	beq.n	80027f0 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800288a:	4641      	mov	r1, r8
 800288c:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800288e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002890:	f7ff fe15 	bl	80024be <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002894:	f1b9 0f00 	cmp.w	r9, #0
 8002898:	d1a3      	bne.n	80027e2 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800289a:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800289c:	3d01      	subs	r5, #1
 800289e:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028a0:	b913      	cbnz	r3, 80028a8 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80028a2:	f000 fcb5 	bl	8003210 <pvTaskIncrementMutexHeldCount>
 80028a6:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	b163      	cbz	r3, 80028c6 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ac:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b0:	f000 fb76 	bl	8002fa0 <xTaskRemoveFromEventList>
 80028b4:	b138      	cbz	r0, 80028c6 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <xQueueGenericReceive+0x184>)
 80028b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80028c6:	f7ff fbf7 	bl	80020b8 <vPortExitCritical>
				return pdPASS;
 80028ca:	2001      	movs	r0, #1
}
 80028cc:	b004      	add	sp, #16
 80028ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff fe08 	bl	80024e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028d8:	f000 fa38 	bl	8002d4c <xTaskResumeAll>
 80028dc:	e7cf      	b.n	800287e <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff fe02 	bl	80024e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028e4:	f000 fa32 	bl	8002d4c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80028e8:	f7ff fbc4 	bl	8002074 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80028ee:	f7ff fbe3 	bl	80020b8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f2:	2d00      	cmp	r5, #0
 80028f4:	d1c3      	bne.n	800287e <xQueueGenericReceive+0xf6>
 80028f6:	e77f      	b.n	80027f8 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028f8:	f000 fbe4 	bl	80030c4 <xTaskGetSchedulerState>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f43f af63 	beq.w	80027c8 <xQueueGenericReceive+0x40>
 8002902:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002904:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002906:	f8df a004 	ldr.w	sl, [pc, #4]	; 800290c <xQueueGenericReceive+0x184>
 800290a:	e7b9      	b.n	8002880 <xQueueGenericReceive+0xf8>
 800290c:	e000ed04 	.word	0xe000ed04

08002910 <uxQueueSpacesAvailable>:
{
 8002910:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002912:	4605      	mov	r5, r0
 8002914:	b940      	cbnz	r0, 8002928 <uxQueueSpacesAvailable+0x18>
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	e7fe      	b.n	8002926 <uxQueueSpacesAvailable+0x16>
	taskENTER_CRITICAL();
 8002928:	f7ff fba4 	bl	8002074 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800292c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800292e:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 8002930:	1a24      	subs	r4, r4, r0
	taskEXIT_CRITICAL();
 8002932:	f7ff fbc1 	bl	80020b8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002936:	4620      	mov	r0, r4
 8002938:	bd38      	pop	{r3, r4, r5, pc}
	...

0800293c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <prvResetNextTaskUnblockTime+0x1c>)
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <prvResetNextTaskUnblockTime+0x20>)
 8002944:	b919      	cbnz	r1, 800294e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002946:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002952:	68d2      	ldr	r2, [r2, #12]
 8002954:	6852      	ldr	r2, [r2, #4]
 8002956:	e7f8      	b.n	800294a <prvResetNextTaskUnblockTime+0xe>
 8002958:	20001048 	.word	0x20001048
 800295c:	20001120 	.word	0x20001120

08002960 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002964:	4e1b      	ldr	r6, [pc, #108]	; (80029d4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002966:	681d      	ldr	r5, [r3, #0]
{
 8002968:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800296a:	6830      	ldr	r0, [r6, #0]
 800296c:	3004      	adds	r0, #4
{
 800296e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002970:	f7ff fb11 	bl	8001f96 <uxListRemove>
 8002974:	4633      	mov	r3, r6
 8002976:	b940      	cbnz	r0, 800298a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002978:	6831      	ldr	r1, [r6, #0]
 800297a:	4e17      	ldr	r6, [pc, #92]	; (80029d8 <prvAddCurrentTaskToDelayedList+0x78>)
 800297c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800297e:	6832      	ldr	r2, [r6, #0]
 8002980:	2001      	movs	r0, #1
 8002982:	4088      	lsls	r0, r1
 8002984:	ea22 0200 	bic.w	r2, r2, r0
 8002988:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800298a:	1c62      	adds	r2, r4, #1
 800298c:	d107      	bne.n	800299e <prvAddCurrentTaskToDelayedList+0x3e>
 800298e:	b137      	cbz	r7, 800299e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	4812      	ldr	r0, [pc, #72]	; (80029dc <prvAddCurrentTaskToDelayedList+0x7c>)
 8002994:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800299a:	f7ff bad9 	b.w	8001f50 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800299e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029a0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80029a2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029a4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80029a6:	d907      	bls.n	80029b8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <prvAddCurrentTaskToDelayedList+0x80>)
 80029aa:	6810      	ldr	r0, [r2, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
}
 80029ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029b2:	3104      	adds	r1, #4
 80029b4:	f7ff bad8 	b.w	8001f68 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <prvAddCurrentTaskToDelayedList+0x84>)
 80029ba:	6810      	ldr	r0, [r2, #0]
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	3104      	adds	r1, #4
 80029c0:	f7ff fad2 	bl	8001f68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <prvAddCurrentTaskToDelayedList+0x88>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80029ca:	bf38      	it	cc
 80029cc:	601c      	strcc	r4, [r3, #0]
 80029ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d0:	20001168 	.word	0x20001168
 80029d4:	20001044 	.word	0x20001044
 80029d8:	200010f0 	.word	0x200010f0
 80029dc:	20001140 	.word	0x20001140
 80029e0:	2000104c 	.word	0x2000104c
 80029e4:	20001048 	.word	0x20001048
 80029e8:	20001120 	.word	0x20001120

080029ec <prvTaskIsTaskSuspended.part.0>:
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	e7fe      	b.n	80029fc <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002a00 <xTaskCreate>:
	{
 8002a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a04:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002a08:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a0a:	4650      	mov	r0, sl
	{
 8002a0c:	460f      	mov	r7, r1
 8002a0e:	4699      	mov	r9, r3
 8002a10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a12:	f7ff fc5b 	bl	80022cc <pvPortMalloc>
			if( pxStack != NULL )
 8002a16:	4605      	mov	r5, r0
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	f000 8096 	beq.w	8002b4a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a1e:	2054      	movs	r0, #84	; 0x54
 8002a20:	f7ff fc54 	bl	80022cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002a24:	4604      	mov	r4, r0
 8002a26:	2800      	cmp	r0, #0
 8002a28:	f000 808c 	beq.w	8002b44 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a2c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002a30:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a32:	4455      	add	r5, sl
 8002a34:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a36:	f025 0a07 	bic.w	sl, r5, #7
 8002a3a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002a3e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a40:	7859      	ldrb	r1, [r3, #1]
 8002a42:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002a46:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002a4a:	b109      	cbz	r1, 8002a50 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a4c:	42bb      	cmp	r3, r7
 8002a4e:	d1f7      	bne.n	8002a40 <xTaskCreate+0x40>
 8002a50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002a52:	2d06      	cmp	r5, #6
 8002a54:	bf28      	it	cs
 8002a56:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a58:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a5c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002a5e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002a60:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a62:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a64:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002a68:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a6c:	f7ff fa6d 	bl	8001f4a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a70:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a74:	f104 0018 	add.w	r0, r4, #24
 8002a78:	f7ff fa67 	bl	8001f4a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002a7c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a80:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a82:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a84:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a86:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a8a:	464a      	mov	r2, r9
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	4650      	mov	r0, sl
 8002a90:	f7ff fac4 	bl	800201c <pxPortInitialiseStack>
 8002a94:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002a96:	b106      	cbz	r6, 8002a9a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a98:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002a9a:	f7ff faeb 	bl	8002074 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002a9e:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002aa0:	4e32      	ldr	r6, [pc, #200]	; (8002b6c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002b98 <xTaskCreate+0x198>
 8002aa8:	3201      	adds	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002aac:	6835      	ldr	r5, [r6, #0]
 8002aae:	2d00      	cmp	r5, #0
 8002ab0:	d14e      	bne.n	8002b50 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002ab2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d11d      	bne.n	8002af6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002aba:	eb08 0005 	add.w	r0, r8, r5
 8002abe:	3514      	adds	r5, #20
 8002ac0:	f7ff fa38 	bl	8001f34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ac4:	2d8c      	cmp	r5, #140	; 0x8c
 8002ac6:	d1f8      	bne.n	8002aba <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002ac8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002b9c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002acc:	4d28      	ldr	r5, [pc, #160]	; (8002b70 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002ace:	4648      	mov	r0, r9
 8002ad0:	f7ff fa30 	bl	8001f34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f7ff fa2d 	bl	8001f34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ada:	4826      	ldr	r0, [pc, #152]	; (8002b74 <xTaskCreate+0x174>)
 8002adc:	f7ff fa2a 	bl	8001f34 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002ae0:	4825      	ldr	r0, [pc, #148]	; (8002b78 <xTaskCreate+0x178>)
 8002ae2:	f7ff fa27 	bl	8001f34 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002ae6:	4825      	ldr	r0, [pc, #148]	; (8002b7c <xTaskCreate+0x17c>)
 8002ae8:	f7ff fa24 	bl	8001f34 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <xTaskCreate+0x180>)
 8002aee:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <xTaskCreate+0x184>)
 8002af4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002af8:	4924      	ldr	r1, [pc, #144]	; (8002b8c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002afa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002afc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002afe:	3301      	adds	r3, #1
 8002b00:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002b02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b04:	2501      	movs	r5, #1
 8002b06:	fa05 f302 	lsl.w	r3, r5, r2
 8002b0a:	4303      	orrs	r3, r0
 8002b0c:	2014      	movs	r0, #20
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	fb00 8002 	mla	r0, r0, r2, r8
 8002b14:	4639      	mov	r1, r7
 8002b16:	f7ff fa1b 	bl	8001f50 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002b1a:	f7ff facd 	bl	80020b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <xTaskCreate+0x190>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b163      	cbz	r3, 8002b3e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b24:	6833      	ldr	r3, [r6, #0]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d207      	bcs.n	8002b3e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002b2e:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <xTaskCreate+0x194>)
 8002b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	f3bf 8f6f 	isb	sy
	}
 8002b3e:	4628      	mov	r0, r5
 8002b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002b44:	4628      	mov	r0, r5
 8002b46:	f7ff fc4f 	bl	80023e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b4a:	f04f 35ff 	mov.w	r5, #4294967295
 8002b4e:	e7f6      	b.n	8002b3e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <xTaskCreate+0x190>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ce      	bne.n	8002af6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b58:	6833      	ldr	r3, [r6, #0]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b5e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002b60:	bf98      	it	ls
 8002b62:	6034      	strls	r4, [r6, #0]
 8002b64:	e7c7      	b.n	8002af6 <xTaskCreate+0xf6>
 8002b66:	bf00      	nop
 8002b68:	200010dc 	.word	0x200010dc
 8002b6c:	20001044 	.word	0x20001044
 8002b70:	20001108 	.word	0x20001108
 8002b74:	20001128 	.word	0x20001128
 8002b78:	20001154 	.word	0x20001154
 8002b7c:	20001140 	.word	0x20001140
 8002b80:	20001048 	.word	0x20001048
 8002b84:	2000104c 	.word	0x2000104c
 8002b88:	200010ec 	.word	0x200010ec
 8002b8c:	200010f0 	.word	0x200010f0
 8002b90:	2000113c 	.word	0x2000113c
 8002b94:	e000ed04 	.word	0xe000ed04
 8002b98:	20001050 	.word	0x20001050
 8002b9c:	200010f4 	.word	0x200010f4

08002ba0 <vTaskStartScheduler>:
{
 8002ba0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <vTaskStartScheduler+0x60>)
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	2400      	movs	r4, #0
 8002ba8:	9400      	str	r4, [sp, #0]
 8002baa:	4623      	mov	r3, r4
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	4915      	ldr	r1, [pc, #84]	; (8002c04 <vTaskStartScheduler+0x64>)
 8002bb0:	4815      	ldr	r0, [pc, #84]	; (8002c08 <vTaskStartScheduler+0x68>)
 8002bb2:	f7ff ff25 	bl	8002a00 <xTaskCreate>
	if( xReturn == pdPASS )
 8002bb6:	2801      	cmp	r0, #1
 8002bb8:	d114      	bne.n	8002be4 <vTaskStartScheduler+0x44>
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <vTaskStartScheduler+0x6c>)
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <vTaskStartScheduler+0x70>)
 8002bd4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <vTaskStartScheduler+0x74>)
 8002bd8:	601c      	str	r4, [r3, #0]
}
 8002bda:	b002      	add	sp, #8
 8002bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002be0:	f7ff bada 	b.w	8002198 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002be4:	3001      	adds	r0, #1
 8002be6:	d108      	bne.n	8002bfa <vTaskStartScheduler+0x5a>
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	e7fe      	b.n	8002bf8 <vTaskStartScheduler+0x58>
}
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000111c 	.word	0x2000111c
 8002c04:	08003831 	.word	0x08003831
 8002c08:	08002e85 	.word	0x08002e85
 8002c0c:	20001120 	.word	0x20001120
 8002c10:	2000113c 	.word	0x2000113c
 8002c14:	20001168 	.word	0x20001168

08002c18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002c18:	4a02      	ldr	r2, [pc, #8]	; (8002c24 <vTaskSuspendAll+0xc>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	200010e8 	.word	0x200010e8

08002c28 <xTaskIncrementTick>:
{
 8002c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c2c:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <xTaskIncrementTick+0xf8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d153      	bne.n	8002cdc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <xTaskIncrementTick+0xfc>)
 8002c36:	681c      	ldr	r4, [r3, #0]
 8002c38:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002c3a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002c3c:	b9bc      	cbnz	r4, 8002c6e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <xTaskIncrementTick+0x100>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	b142      	cbz	r2, 8002c58 <xTaskIncrementTick+0x30>
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	e7fe      	b.n	8002c56 <xTaskIncrementTick+0x2e>
 8002c58:	4a34      	ldr	r2, [pc, #208]	; (8002d2c <xTaskIncrementTick+0x104>)
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	6810      	ldr	r0, [r2, #0]
 8002c5e:	6018      	str	r0, [r3, #0]
 8002c60:	6011      	str	r1, [r2, #0]
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <xTaskIncrementTick+0x108>)
 8002c64:	6813      	ldr	r3, [r2, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	f7ff fe67 	bl	800293c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c6e:	4d31      	ldr	r5, [pc, #196]	; (8002d34 <xTaskIncrementTick+0x10c>)
 8002c70:	4f31      	ldr	r7, [pc, #196]	; (8002d38 <xTaskIncrementTick+0x110>)
 8002c72:	682b      	ldr	r3, [r5, #0]
 8002c74:	429c      	cmp	r4, r3
 8002c76:	f04f 0b00 	mov.w	fp, #0
 8002c7a:	d33e      	bcc.n	8002cfa <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c7c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002d28 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002c80:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002d48 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c84:	f8d8 2000 	ldr.w	r2, [r8]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	bb72      	cbnz	r2, 8002cea <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	602a      	str	r2, [r5, #0]
					break;
 8002c92:	e032      	b.n	8002cfa <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c94:	f106 0a04 	add.w	sl, r6, #4
 8002c98:	4650      	mov	r0, sl
 8002c9a:	f7ff f97c 	bl	8001f96 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c9e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002ca0:	b119      	cbz	r1, 8002caa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ca2:	f106 0018 	add.w	r0, r6, #24
 8002ca6:	f7ff f976 	bl	8001f96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002caa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002cac:	f8d9 3000 	ldr.w	r3, [r9]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	fa02 f100 	lsl.w	r1, r2, r0
 8002cb6:	4319      	orrs	r1, r3
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <xTaskIncrementTick+0x114>)
 8002cba:	f8c9 1000 	str.w	r1, [r9]
 8002cbe:	f04f 0e14 	mov.w	lr, #20
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	fb0e 3000 	mla	r0, lr, r0, r3
 8002cc8:	f7ff f942 	bl	8001f50 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002cd0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002cd2:	4291      	cmp	r1, r2
 8002cd4:	bf28      	it	cs
 8002cd6:	f04f 0b01 	movcs.w	fp, #1
 8002cda:	e7d3      	b.n	8002c84 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <xTaskIncrementTick+0x118>)
 8002cde:	6813      	ldr	r3, [r2, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002ce4:	f04f 0b00 	mov.w	fp, #0
 8002ce8:	e011      	b.n	8002d0e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cea:	f8d8 2000 	ldr.w	r2, [r8]
 8002cee:	68d2      	ldr	r2, [r2, #12]
 8002cf0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cf2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002cf4:	428c      	cmp	r4, r1
 8002cf6:	d2cd      	bcs.n	8002c94 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002cf8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <xTaskIncrementTick+0x114>)
 8002cfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d00:	2214      	movs	r2, #20
 8002d02:	434a      	muls	r2, r1
 8002d04:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002d06:	2a02      	cmp	r2, #2
 8002d08:	bf28      	it	cs
 8002d0a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002d0e:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <xTaskIncrementTick+0x11c>)
 8002d10:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	bf18      	it	ne
 8002d16:	f04f 0b01 	movne.w	fp, #1
}
 8002d1a:	4658      	mov	r0, fp
 8002d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d20:	200010e8 	.word	0x200010e8
 8002d24:	20001168 	.word	0x20001168
 8002d28:	20001048 	.word	0x20001048
 8002d2c:	2000104c 	.word	0x2000104c
 8002d30:	20001124 	.word	0x20001124
 8002d34:	20001120 	.word	0x20001120
 8002d38:	20001044 	.word	0x20001044
 8002d3c:	20001050 	.word	0x20001050
 8002d40:	200010e4 	.word	0x200010e4
 8002d44:	2000116c 	.word	0x2000116c
 8002d48:	200010f0 	.word	0x200010f0

08002d4c <xTaskResumeAll>:
{
 8002d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002d50:	4c31      	ldr	r4, [pc, #196]	; (8002e18 <xTaskResumeAll+0xcc>)
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	b943      	cbnz	r3, 8002d68 <xTaskResumeAll+0x1c>
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	e7fe      	b.n	8002d66 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002d68:	f7ff f984 	bl	8002074 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d72:	6824      	ldr	r4, [r4, #0]
 8002d74:	b12c      	cbz	r4, 8002d82 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002d76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002d78:	f7ff f99e 	bl	80020b8 <vPortExitCritical>
}
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <xTaskResumeAll+0xd0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f5      	beq.n	8002d76 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d8a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002e34 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002d8e:	4f24      	ldr	r7, [pc, #144]	; (8002e20 <xTaskResumeAll+0xd4>)
 8002d90:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002e38 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d94:	f8d9 3000 	ldr.w	r3, [r9]
 8002d98:	b9e3      	cbnz	r3, 8002dd4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002d9a:	b10c      	cbz	r4, 8002da0 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002d9c:	f7ff fdce 	bl	800293c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002da0:	4d20      	ldr	r5, [pc, #128]	; (8002e24 <xTaskResumeAll+0xd8>)
 8002da2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002da4:	b144      	cbz	r4, 8002db8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002da6:	4e20      	ldr	r6, [pc, #128]	; (8002e28 <xTaskResumeAll+0xdc>)
 8002da8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002daa:	f7ff ff3d 	bl	8002c28 <xTaskIncrementTick>
 8002dae:	b100      	cbz	r0, 8002db2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002db0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002db2:	3c01      	subs	r4, #1
 8002db4:	d1f9      	bne.n	8002daa <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002db6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <xTaskResumeAll+0xdc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0da      	beq.n	8002d76 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <xTaskResumeAll+0xe0>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002dd0:	2401      	movs	r4, #1
 8002dd2:	e7d1      	b.n	8002d78 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002dd4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002dd8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dda:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ddc:	f104 0018 	add.w	r0, r4, #24
 8002de0:	f7ff f8d9 	bl	8001f96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002de4:	4630      	mov	r0, r6
 8002de6:	f7ff f8d6 	bl	8001f96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	2501      	movs	r5, #1
 8002df0:	fa05 f302 	lsl.w	r3, r5, r2
 8002df4:	2014      	movs	r0, #20
 8002df6:	430b      	orrs	r3, r1
 8002df8:	fb00 8002 	mla	r0, r0, r2, r8
 8002dfc:	4631      	mov	r1, r6
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	f7ff f8a6 	bl	8001f50 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <xTaskResumeAll+0xe4>)
 8002e06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002e0e:	bf24      	itt	cs
 8002e10:	4b05      	ldrcs	r3, [pc, #20]	; (8002e28 <xTaskResumeAll+0xdc>)
 8002e12:	601d      	strcs	r5, [r3, #0]
 8002e14:	e7be      	b.n	8002d94 <xTaskResumeAll+0x48>
 8002e16:	bf00      	nop
 8002e18:	200010e8 	.word	0x200010e8
 8002e1c:	200010dc 	.word	0x200010dc
 8002e20:	200010f0 	.word	0x200010f0
 8002e24:	200010e4 	.word	0x200010e4
 8002e28:	2000116c 	.word	0x2000116c
 8002e2c:	e000ed04 	.word	0xe000ed04
 8002e30:	20001044 	.word	0x20001044
 8002e34:	20001128 	.word	0x20001128
 8002e38:	20001050 	.word	0x20001050

08002e3c <vTaskDelay>:
	{
 8002e3c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e3e:	b940      	cbnz	r0, 8002e52 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <vTaskDelay+0x40>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <vTaskDelay+0x44>)
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	b141      	cbz	r1, 8002e6a <vTaskDelay+0x2e>
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	e7fe      	b.n	8002e68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002e6a:	f7ff fed5 	bl	8002c18 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e6e:	f7ff fd77 	bl	8002960 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002e72:	f7ff ff6b 	bl	8002d4c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d0e2      	beq.n	8002e40 <vTaskDelay+0x4>
 8002e7a:	bd08      	pop	{r3, pc}
 8002e7c:	e000ed04 	.word	0xe000ed04
 8002e80:	200010e8 	.word	0x200010e8

08002e84 <prvIdleTask>:
{
 8002e84:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002e86:	4e17      	ldr	r6, [pc, #92]	; (8002ee4 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e88:	4c17      	ldr	r4, [pc, #92]	; (8002ee8 <prvIdleTask+0x64>)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	b963      	cbnz	r3, 8002ea8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <prvIdleTask+0x68>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d9f8      	bls.n	8002e88 <prvIdleTask+0x4>
				taskYIELD();
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <prvIdleTask+0x6c>)
 8002e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	e7ef      	b.n	8002e88 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002ea8:	f7ff feb6 	bl	8002c18 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002eac:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002eae:	f7ff ff4d 	bl	8002d4c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8002eb2:	2d00      	cmp	r5, #0
 8002eb4:	d0e9      	beq.n	8002e8a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002eb6:	f7ff f8dd 	bl	8002074 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002eba:	68f3      	ldr	r3, [r6, #12]
 8002ebc:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ebe:	1d28      	adds	r0, r5, #4
 8002ec0:	f7ff f869 	bl	8001f96 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <prvIdleTask+0x70>)
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8002ed2:	f7ff f8f1 	bl	80020b8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002ed6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002ed8:	f7ff fa86 	bl	80023e8 <vPortFree>
			vPortFree( pxTCB );
 8002edc:	4628      	mov	r0, r5
 8002ede:	f7ff fa83 	bl	80023e8 <vPortFree>
 8002ee2:	e7d2      	b.n	8002e8a <prvIdleTask+0x6>
 8002ee4:	20001154 	.word	0x20001154
 8002ee8:	200010e0 	.word	0x200010e0
 8002eec:	20001050 	.word	0x20001050
 8002ef0:	e000ed04 	.word	0xe000ed04
 8002ef4:	200010dc 	.word	0x200010dc

08002ef8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <vTaskSwitchContext+0x60>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <vTaskSwitchContext+0x64>)
{
 8002efe:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f00:	b112      	cbz	r2, 8002f08 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002f02:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002f08:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <vTaskSwitchContext+0x68>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f1c3 031f 	rsb	r3, r3, #31
 8002f18:	2214      	movs	r2, #20
 8002f1a:	4912      	ldr	r1, [pc, #72]	; (8002f64 <vTaskSwitchContext+0x6c>)
 8002f1c:	435a      	muls	r2, r3
 8002f1e:	1888      	adds	r0, r1, r2
 8002f20:	588c      	ldr	r4, [r1, r2]
 8002f22:	b944      	cbnz	r4, 8002f36 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	e7fe      	b.n	8002f34 <vTaskSwitchContext+0x3c>
 8002f36:	6844      	ldr	r4, [r0, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	6864      	ldr	r4, [r4, #4]
 8002f3c:	6044      	str	r4, [r0, #4]
 8002f3e:	440a      	add	r2, r1
 8002f40:	4294      	cmp	r4, r2
 8002f42:	bf04      	itt	eq
 8002f44:	6862      	ldreq	r2, [r4, #4]
 8002f46:	6042      	streq	r2, [r0, #4]
 8002f48:	2214      	movs	r2, #20
 8002f4a:	fb02 1303 	mla	r3, r2, r3, r1
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <vTaskSwitchContext+0x70>)
 8002f54:	e7d6      	b.n	8002f04 <vTaskSwitchContext+0xc>
 8002f56:	bf00      	nop
 8002f58:	200010e8 	.word	0x200010e8
 8002f5c:	2000116c 	.word	0x2000116c
 8002f60:	200010f0 	.word	0x200010f0
 8002f64:	20001050 	.word	0x20001050
 8002f68:	20001044 	.word	0x20001044

08002f6c <vTaskPlaceOnEventList>:
{
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002f70:	b940      	cbnz	r0, 8002f84 <vTaskPlaceOnEventList+0x18>
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	e7fe      	b.n	8002f82 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <vTaskPlaceOnEventList+0x30>)
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	3118      	adds	r1, #24
 8002f8a:	f7fe ffed 	bl	8001f68 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f8e:	4620      	mov	r0, r4
 8002f90:	2101      	movs	r1, #1
}
 8002f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f96:	f7ff bce3 	b.w	8002960 <prvAddCurrentTaskToDelayedList>
 8002f9a:	bf00      	nop
 8002f9c:	20001044 	.word	0x20001044

08002fa0 <xTaskRemoveFromEventList>:
{
 8002fa0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fa2:	68c3      	ldr	r3, [r0, #12]
 8002fa4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002fa6:	b944      	cbnz	r4, 8002fba <xTaskRemoveFromEventList+0x1a>
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	e7fe      	b.n	8002fb8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fba:	f104 0518 	add.w	r5, r4, #24
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f7fe ffe9 	bl	8001f96 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <xTaskRemoveFromEventList+0x6c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b9e3      	cbnz	r3, 8003004 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fca:	1d25      	adds	r5, r4, #4
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7fe ffe2 	bl	8001f96 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fd2:	490f      	ldr	r1, [pc, #60]	; (8003010 <xTaskRemoveFromEventList+0x70>)
 8002fd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fd6:	6808      	ldr	r0, [r1, #0]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4093      	lsls	r3, r2
 8002fdc:	4303      	orrs	r3, r0
 8002fde:	600b      	str	r3, [r1, #0]
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <xTaskRemoveFromEventList+0x74>)
 8002fe2:	2014      	movs	r0, #20
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fea:	f7fe ffb1 	bl	8001f50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <xTaskRemoveFromEventList+0x78>)
 8002ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002ff8:	bf83      	ittte	hi
 8002ffa:	4b08      	ldrhi	r3, [pc, #32]	; (800301c <xTaskRemoveFromEventList+0x7c>)
 8002ffc:	2001      	movhi	r0, #1
 8002ffe:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003000:	2000      	movls	r0, #0
}
 8003002:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003004:	4629      	mov	r1, r5
 8003006:	4806      	ldr	r0, [pc, #24]	; (8003020 <xTaskRemoveFromEventList+0x80>)
 8003008:	e7ef      	b.n	8002fea <xTaskRemoveFromEventList+0x4a>
 800300a:	bf00      	nop
 800300c:	200010e8 	.word	0x200010e8
 8003010:	200010f0 	.word	0x200010f0
 8003014:	20001050 	.word	0x20001050
 8003018:	20001044 	.word	0x20001044
 800301c:	2000116c 	.word	0x2000116c
 8003020:	20001128 	.word	0x20001128

08003024 <vTaskSetTimeOutState>:
{
 8003024:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003026:	b908      	cbnz	r0, 800302c <vTaskSetTimeOutState+0x8>
 8003028:	f7ff fce0 	bl	80029ec <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <vTaskSetTimeOutState+0x18>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003032:	4b03      	ldr	r3, [pc, #12]	; (8003040 <vTaskSetTimeOutState+0x1c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6043      	str	r3, [r0, #4]
 8003038:	bd08      	pop	{r3, pc}
 800303a:	bf00      	nop
 800303c:	20001124 	.word	0x20001124
 8003040:	20001168 	.word	0x20001168

08003044 <xTaskCheckForTimeOut>:
{
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003048:	4604      	mov	r4, r0
 800304a:	b940      	cbnz	r0, 800305e <xTaskCheckForTimeOut+0x1a>
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	e7fe      	b.n	800305c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800305e:	b941      	cbnz	r1, 8003072 <xTaskCheckForTimeOut+0x2e>
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	e7fe      	b.n	8003070 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003072:	f7fe ffff 	bl	8002074 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <xTaskCheckForTimeOut+0x6c>)
 8003078:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	d010      	beq.n	80030a2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003080:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <xTaskCheckForTimeOut+0x70>)
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	4290      	cmp	r0, r2
 8003088:	6862      	ldr	r2, [r4, #4]
 800308a:	d001      	beq.n	8003090 <xTaskCheckForTimeOut+0x4c>
 800308c:	4291      	cmp	r1, r2
 800308e:	d20d      	bcs.n	80030ac <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003090:	1a88      	subs	r0, r1, r2
 8003092:	4283      	cmp	r3, r0
 8003094:	d90a      	bls.n	80030ac <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003096:	1a5b      	subs	r3, r3, r1
 8003098:	4413      	add	r3, r2
 800309a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800309c:	4620      	mov	r0, r4
 800309e:	f7ff ffc1 	bl	8003024 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80030a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80030a4:	f7ff f808 	bl	80020b8 <vPortExitCritical>
}
 80030a8:	4620      	mov	r0, r4
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80030ac:	2401      	movs	r4, #1
 80030ae:	e7f9      	b.n	80030a4 <xTaskCheckForTimeOut+0x60>
 80030b0:	20001168 	.word	0x20001168
 80030b4:	20001124 	.word	0x20001124

080030b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80030b8:	4b01      	ldr	r3, [pc, #4]	; (80030c0 <vTaskMissedYield+0x8>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4770      	bx	lr
 80030c0:	2000116c 	.word	0x2000116c

080030c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <xTaskGetSchedulerState+0x18>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b133      	cbz	r3, 80030d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <xTaskGetSchedulerState+0x1c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80030d0:	bf0c      	ite	eq
 80030d2:	2002      	moveq	r0, #2
 80030d4:	2000      	movne	r0, #0
 80030d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030d8:	2001      	movs	r0, #1
	}
 80030da:	4770      	bx	lr
 80030dc:	2000113c 	.word	0x2000113c
 80030e0:	200010e8 	.word	0x200010e8

080030e4 <vTaskPriorityInherit>:
	{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80030e8:	4604      	mov	r4, r0
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d038      	beq.n	8003160 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80030ee:	4d1d      	ldr	r5, [pc, #116]	; (8003164 <vTaskPriorityInherit+0x80>)
 80030f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80030f2:	682a      	ldr	r2, [r5, #0]
 80030f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d232      	bcs.n	8003160 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80030fa:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80030fc:	4e1a      	ldr	r6, [pc, #104]	; (8003168 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80030fe:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003100:	bfa1      	itttt	ge
 8003102:	682a      	ldrge	r2, [r5, #0]
 8003104:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003106:	f1c2 0207 	rsbge	r2, r2, #7
 800310a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800310c:	2714      	movs	r7, #20
 800310e:	6942      	ldr	r2, [r0, #20]
 8003110:	fb07 6303 	mla	r3, r7, r3, r6
 8003114:	429a      	cmp	r2, r3
 8003116:	d120      	bne.n	800315a <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003118:	f100 0804 	add.w	r8, r0, #4
 800311c:	4640      	mov	r0, r8
 800311e:	f7fe ff3a 	bl	8001f96 <uxListRemove>
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <vTaskPriorityInherit+0x88>)
 8003124:	b948      	cbnz	r0, 800313a <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003126:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003128:	4347      	muls	r7, r0
 800312a:	59f3      	ldr	r3, [r6, r7]
 800312c:	b92b      	cbnz	r3, 800313a <vTaskPriorityInherit+0x56>
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	4081      	lsls	r1, r0
 8003134:	ea23 0301 	bic.w	r3, r3, r1
 8003138:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800313a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800313c:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800313e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003140:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003142:	2301      	movs	r3, #1
 8003144:	4083      	lsls	r3, r0
 8003146:	430b      	orrs	r3, r1
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	2314      	movs	r3, #20
 800314c:	4641      	mov	r1, r8
 800314e:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003156:	f7fe befb 	b.w	8001f50 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800315a:	682b      	ldr	r3, [r5, #0]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003164:	20001044 	.word	0x20001044
 8003168:	20001050 	.word	0x20001050
 800316c:	200010f0 	.word	0x200010f0

08003170 <xTaskPriorityDisinherit>:
	{
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003172:	4604      	mov	r4, r0
 8003174:	b908      	cbnz	r0, 800317a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003176:	2000      	movs	r0, #0
 8003178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <xTaskPriorityDisinherit+0x94>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4298      	cmp	r0, r3
 8003180:	d008      	beq.n	8003194 <xTaskPriorityDisinherit+0x24>
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	e7fe      	b.n	8003192 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003194:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003196:	b943      	cbnz	r3, 80031aa <xTaskPriorityDisinherit+0x3a>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	e7fe      	b.n	80031a8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80031ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80031ae:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031b0:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80031b2:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031b4:	d0df      	beq.n	8003176 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1dd      	bne.n	8003176 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031ba:	1d05      	adds	r5, r0, #4
 80031bc:	4628      	mov	r0, r5
 80031be:	f7fe feea 	bl	8001f96 <uxListRemove>
 80031c2:	4e11      	ldr	r6, [pc, #68]	; (8003208 <xTaskPriorityDisinherit+0x98>)
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <xTaskPriorityDisinherit+0x9c>)
 80031c6:	b950      	cbnz	r0, 80031de <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80031ca:	2114      	movs	r1, #20
 80031cc:	4379      	muls	r1, r7
 80031ce:	5873      	ldr	r3, [r6, r1]
 80031d0:	b92b      	cbnz	r3, 80031de <xTaskPriorityDisinherit+0x6e>
 80031d2:	6813      	ldr	r3, [r2, #0]
 80031d4:	2001      	movs	r0, #1
 80031d6:	40b8      	lsls	r0, r7
 80031d8:	ea23 0300 	bic.w	r3, r3, r0
 80031dc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031e0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e2:	f1c3 0107 	rsb	r1, r3, #7
 80031e6:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80031e8:	6811      	ldr	r1, [r2, #0]
 80031ea:	2401      	movs	r4, #1
 80031ec:	fa04 f003 	lsl.w	r0, r4, r3
 80031f0:	4308      	orrs	r0, r1
 80031f2:	6010      	str	r0, [r2, #0]
 80031f4:	2014      	movs	r0, #20
 80031f6:	fb00 6003 	mla	r0, r0, r3, r6
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fe fea8 	bl	8001f50 <vListInsertEnd>
					xReturn = pdTRUE;
 8003200:	4620      	mov	r0, r4
	}
 8003202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003204:	20001044 	.word	0x20001044
 8003208:	20001050 	.word	0x20001050
 800320c:	200010f0 	.word	0x200010f0

08003210 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <pvTaskIncrementMutexHeldCount+0x14>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	b11a      	cbz	r2, 800321e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800321a:	3201      	adds	r2, #1
 800321c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800321e:	6818      	ldr	r0, [r3, #0]
	}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20001044 	.word	0x20001044

08003228 <vLedToggle>:

QueueHandle_t xQueue;


void vLedToggle(void *pvParameters)
{
 8003228:	b508      	push	{r3, lr}
	TickType_t xDelay = 1000 / portTICK_PERIOD_MS;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800322a:	2120      	movs	r1, #32
 800322c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003230:	f7fd facb 	bl	80007ca <HAL_GPIO_TogglePin>
		vTaskDelay(xDelay);
 8003234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003238:	f7ff fe00 	bl	8002e3c <vTaskDelay>
 800323c:	e7f5      	b.n	800322a <vLedToggle+0x2>
	...

08003240 <vUartTransmit>:

	}
}

void vUartTransmit(void *pvParameters)
{
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28

	uint8_t *ptr_txBuffer;



	ptr_txBuffer = txBuffer;
 8003244:	ab02      	add	r3, sp, #8
 8003246:	9301      	str	r3, [sp, #4]

	uint8_t debugMsg[] = "Waiting for message.\n";
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <vUartTransmit+0x58>)
 800324a:	aa04      	add	r2, sp, #16
 800324c:	f103 0510 	add.w	r5, r3, #16
 8003250:	4616      	mov	r6, r2
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	4614      	mov	r4, r2
 8003258:	c403      	stmia	r4!, {r0, r1}
 800325a:	3308      	adds	r3, #8
 800325c:	42ab      	cmp	r3, r5
 800325e:	4622      	mov	r2, r4
 8003260:	d1f7      	bne.n	8003252 <vUartTransmit+0x12>
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	6020      	str	r0, [r4, #0]
 8003268:	80a3      	strh	r3, [r4, #4]

	while(1)
	{
		HAL_UART_Transmit(&huart2, debugMsg, sizeof(debugMsg), HAL_MAX_DELAY);

		xQueueReceive(xQueue, &ptr_txBuffer, xDelay);
 800326a:	4d0c      	ldr	r5, [pc, #48]	; (800329c <vUartTransmit+0x5c>)
		HAL_UART_Transmit(&huart2, debugMsg, sizeof(debugMsg), HAL_MAX_DELAY);
 800326c:	4c0c      	ldr	r4, [pc, #48]	; (80032a0 <vUartTransmit+0x60>)
 800326e:	4631      	mov	r1, r6
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	2216      	movs	r2, #22
 8003276:	4620      	mov	r0, r4
 8003278:	f7fe fd03 	bl	8001c82 <HAL_UART_Transmit>
		xQueueReceive(xQueue, &ptr_txBuffer, xDelay);
 800327c:	a901      	add	r1, sp, #4
 800327e:	2300      	movs	r3, #0
 8003280:	2264      	movs	r2, #100	; 0x64
 8003282:	6828      	ldr	r0, [r5, #0]
 8003284:	f7ff fa80 	bl	8002788 <xQueueGenericReceive>

		HAL_UART_Transmit(&huart2, ptr_txBuffer, 7, HAL_MAX_DELAY);
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	2207      	movs	r2, #7
 800328e:	9901      	ldr	r1, [sp, #4]
 8003290:	4620      	mov	r0, r4
 8003292:	f7fe fcf6 	bl	8001c82 <HAL_UART_Transmit>
 8003296:	e7ea      	b.n	800326e <vUartTransmit+0x2e>
 8003298:	08003879 	.word	0x08003879
 800329c:	20001178 	.word	0x20001178
 80032a0:	2000117c 	.word	0x2000117c

080032a4 <vUartReceive>:

	}
}

void vUartReceive(void *pvParameters)
{
 80032a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t rxBuffer[7]; // array is needed for HAL_UART_Receive()
	uint8_t *ptr_rxBuffer; // pointer to the array for xQueueSend

	ptr_rxBuffer = rxBuffer;

	uint8_t debugMsg[] = "  empty spaces.\n";
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <vUartReceive+0x68>)
{
 80032a8:	b089      	sub	sp, #36	; 0x24
	ptr_rxBuffer = rxBuffer;
 80032aa:	ae01      	add	r6, sp, #4
	uint8_t debugMsg[] = "  empty spaces.\n";
 80032ac:	aa03      	add	r2, sp, #12
	ptr_rxBuffer = rxBuffer;
 80032ae:	9600      	str	r6, [sp, #0]
	uint8_t debugMsg[] = "  empty spaces.\n";
 80032b0:	f103 0510 	add.w	r5, r3, #16
 80032b4:	4617      	mov	r7, r2
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	4614      	mov	r4, r2
 80032bc:	c403      	stmia	r4!, {r0, r1}
 80032be:	3308      	adds	r3, #8
 80032c0:	42ab      	cmp	r3, r5
 80032c2:	4622      	mov	r2, r4
 80032c4:	d1f7      	bne.n	80032b6 <vUartReceive+0x12>
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	7023      	strb	r3, [r4, #0]

	while(1)
	{

		HAL_UART_Receive(&huart2, rxBuffer, 7, HAL_MAX_DELAY);
		xQueueSend(xQueue, &ptr_rxBuffer, 0);
 80032ca:	4d11      	ldr	r5, [pc, #68]	; (8003310 <vUartReceive+0x6c>)
		HAL_UART_Receive(&huart2, rxBuffer, 7, HAL_MAX_DELAY);
 80032cc:	4c11      	ldr	r4, [pc, #68]	; (8003314 <vUartReceive+0x70>)
 80032ce:	4631      	mov	r1, r6
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	2207      	movs	r2, #7
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7fe fd2a 	bl	8001d30 <HAL_UART_Receive>
		xQueueSend(xQueue, &ptr_rxBuffer, 0);
 80032dc:	2300      	movs	r3, #0
 80032de:	461a      	mov	r2, r3
 80032e0:	4669      	mov	r1, sp
 80032e2:	6828      	ldr	r0, [r5, #0]
 80032e4:	f7ff f99a 	bl	800261c <xQueueGenericSend>
		available_space = uxQueueSpacesAvailable(xQueue) + 48;
 80032e8:	6828      	ldr	r0, [r5, #0]
 80032ea:	f7ff fb11 	bl	8002910 <uxQueueSpacesAvailable>
 80032ee:	3030      	adds	r0, #48	; 0x30
		debugMsg[0] = available_space;
 80032f0:	f88d 000c 	strb.w	r0, [sp, #12]
		HAL_UART_Transmit(&huart2, debugMsg, sizeof(debugMsg), HAL_MAX_DELAY);
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	2211      	movs	r2, #17
 80032fa:	4639      	mov	r1, r7
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7fe fcc0 	bl	8001c82 <HAL_UART_Transmit>
		vTaskDelay(xDelay);
 8003302:	2064      	movs	r0, #100	; 0x64
 8003304:	f7ff fd9a 	bl	8002e3c <vTaskDelay>
 8003308:	e7e1      	b.n	80032ce <vUartReceive+0x2a>
 800330a:	bf00      	nop
 800330c:	08003868 	.word	0x08003868
 8003310:	20001178 	.word	0x20001178
 8003314:	2000117c 	.word	0x2000117c

08003318 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003318:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f7fe fdf8 	bl	8001f10 <osDelay>
 8003320:	e7fb      	b.n	800331a <StartDefaultTask+0x2>

08003322 <SystemClock_Config>:
{
 8003322:	b530      	push	{r4, r5, lr}
 8003324:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800332c:	2310      	movs	r3, #16
 800332e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003334:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003336:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003338:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800333a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800333c:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800333e:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003340:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003342:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003344:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003346:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003348:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800334a:	f7fd fb29 	bl	80009a0 <HAL_RCC_OscConfig>
 800334e:	b100      	cbz	r0, 8003352 <SystemClock_Config+0x30>
 8003350:	e7fe      	b.n	8003350 <SystemClock_Config+0x2e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003352:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003354:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003356:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003358:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800335c:	2104      	movs	r1, #4
 800335e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003360:	9500      	str	r5, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003362:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003364:	f7fd fd4e 	bl	8000e04 <HAL_RCC_ClockConfig>
 8003368:	b100      	cbz	r0, 800336c <SystemClock_Config+0x4a>
 800336a:	e7fe      	b.n	800336a <SystemClock_Config+0x48>
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800336c:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800336e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003370:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003372:	f7fd ff4d 	bl	8001210 <HAL_RCCEx_PeriphCLKConfig>
 8003376:	b100      	cbz	r0, 800337a <SystemClock_Config+0x58>
 8003378:	e7fe      	b.n	8003378 <SystemClock_Config+0x56>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800337a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800337e:	f7fd fa31 	bl	80007e4 <HAL_PWREx_ControlVoltageScaling>
 8003382:	4604      	mov	r4, r0
 8003384:	b100      	cbz	r0, 8003388 <SystemClock_Config+0x66>
 8003386:	e7fe      	b.n	8003386 <SystemClock_Config+0x64>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003388:	f7fd fdf2 	bl	8000f70 <HAL_RCC_GetHCLKFreq>
 800338c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003390:	fbb0 f0f3 	udiv	r0, r0, r3
 8003394:	f7fd f916 	bl	80005c4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003398:	2004      	movs	r0, #4
 800339a:	f7fd f929 	bl	80005f0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800339e:	4622      	mov	r2, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f04f 30ff 	mov.w	r0, #4294967295
 80033a6:	f7fd f8cd 	bl	8000544 <HAL_NVIC_SetPriority>
}
 80033aa:	b039      	add	sp, #228	; 0xe4
 80033ac:	bd30      	pop	{r4, r5, pc}
	...

080033b0 <main>:
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80033b4:	f7fd f894 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 80033b8:	f7ff ffb3 	bl	8003322 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033bc:	4b62      	ldr	r3, [pc, #392]	; (8003548 <main+0x198>)
 80033be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c0:	f042 0204 	orr.w	r2, r2, #4
 80033c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80033c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033c8:	f002 0204 	and.w	r2, r2, #4
 80033cc:	9202      	str	r2, [sp, #8]
 80033ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80033d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033da:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80033de:	9203      	str	r2, [sp, #12]
 80033e0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80033ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ec:	f002 0201 	and.w	r2, r2, #1
 80033f0:	9204      	str	r2, [sp, #16]
 80033f2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033f6:	f042 0202 	orr.w	r2, r2, #2
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80033fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033fe:	f002 0202 	and.w	r2, r2, #2
 8003402:	9205      	str	r2, [sp, #20]
 8003404:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003408:	f042 0208 	orr.w	r2, r2, #8
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003416:	2200      	movs	r2, #0
 8003418:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800341c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003420:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003422:	f7fd f9cd 	bl	80007c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003426:	2200      	movs	r2, #0
 8003428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800342c:	4847      	ldr	r0, [pc, #284]	; (800354c <main+0x19c>)
 800342e:	f7fd f9c7 	bl	80007c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8003432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8003438:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800343a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <main+0x1a0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800343e:	4845      	ldr	r0, [pc, #276]	; (8003554 <main+0x1a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003440:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003442:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003446:	f7fd f8df 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800344a:	f641 73ff 	movw	r3, #8191	; 0x1fff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800344e:	a907      	add	r1, sp, #28
 8003450:	4840      	ldr	r0, [pc, #256]	; (8003554 <main+0x1a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003452:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003456:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003458:	f7fd f8d6 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 800345c:	f649 03d3 	movw	r3, #39123	; 0x98d3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	a907      	add	r1, sp, #28
 8003462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8003466:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346a:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800346c:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f7fd f8cb 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003472:	f44f 63e4 	mov.w	r3, #1824	; 0x720
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	a907      	add	r1, sp, #28
 8003478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800347c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003482:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003484:	f7fd f8c0 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 8003488:	f64f 33f7 	movw	r3, #64503	; 0xfbf7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	a907      	add	r1, sp, #28
 800348e:	482f      	ldr	r0, [pc, #188]	; (800354c <main+0x19c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 8003490:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003494:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003496:	f7fd f8b7 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800349a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349e:	a907      	add	r1, sp, #28
 80034a0:	482a      	ldr	r0, [pc, #168]	; (800354c <main+0x19c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034aa:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f7fd f8ac 	bl	8000608 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034b0:	a907      	add	r1, sp, #28
 80034b2:	4829      	ldr	r0, [pc, #164]	; (8003558 <main+0x1a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034b6:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b8:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ba:	f7fd f8a5 	bl	8000608 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80034be:	4827      	ldr	r0, [pc, #156]	; (800355c <main+0x1ac>)
  huart2.Init.BaudRate = 115200;
 80034c0:	4a27      	ldr	r2, [pc, #156]	; (8003560 <main+0x1b0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034c2:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80034c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80034c8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034cc:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034ce:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034d0:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034d2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034d6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034d8:	6244      	str	r4, [r0, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034da:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034dc:	f7fe fcc9 	bl	8001e72 <HAL_UART_Init>
 80034e0:	4604      	mov	r4, r0
 80034e2:	b100      	cbz	r0, 80034e6 <main+0x136>
 80034e4:	e7fe      	b.n	80034e4 <main+0x134>
  xQueue = xQueueCreate(4, sizeof(int32_t));
 80034e6:	4602      	mov	r2, r0
 80034e8:	4639      	mov	r1, r7
 80034ea:	4638      	mov	r0, r7
 80034ec:	f7ff f874 	bl	80025d8 <xQueueGenericCreate>
 80034f0:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <main+0x1b4>)
  xTaskCreate(vLedToggle,
 80034f2:	491d      	ldr	r1, [pc, #116]	; (8003568 <main+0x1b8>)
  xQueue = xQueueCreate(4, sizeof(int32_t));
 80034f4:	6018      	str	r0, [r3, #0]
  xTaskCreate(vLedToggle,
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	9500      	str	r5, [sp, #0]
 80034fa:	4623      	mov	r3, r4
 80034fc:	9401      	str	r4, [sp, #4]
 80034fe:	481b      	ldr	r0, [pc, #108]	; (800356c <main+0x1bc>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003500:	4e1b      	ldr	r6, [pc, #108]	; (8003570 <main+0x1c0>)
  xTaskCreate(vLedToggle,
 8003502:	f7ff fa7d 	bl	8002a00 <xTaskCreate>
  xTaskCreate(vUartTransmit,
 8003506:	9500      	str	r5, [sp, #0]
 8003508:	4623      	mov	r3, r4
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	4919      	ldr	r1, [pc, #100]	; (8003574 <main+0x1c4>)
 800350e:	9401      	str	r4, [sp, #4]
 8003510:	4819      	ldr	r0, [pc, #100]	; (8003578 <main+0x1c8>)
 8003512:	f7ff fa75 	bl	8002a00 <xTaskCreate>
  xTaskCreate(vUartReceive,
 8003516:	4623      	mov	r3, r4
 8003518:	2280      	movs	r2, #128	; 0x80
 800351a:	4918      	ldr	r1, [pc, #96]	; (800357c <main+0x1cc>)
 800351c:	9500      	str	r5, [sp, #0]
 800351e:	9401      	str	r4, [sp, #4]
 8003520:	4817      	ldr	r0, [pc, #92]	; (8003580 <main+0x1d0>)
 8003522:	f7ff fa6d 	bl	8002a00 <xTaskCreate>
 vTaskStartScheduler();
 8003526:	f7ff fb3b 	bl	8002ba0 <vTaskStartScheduler>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800352a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800352c:	ad07      	add	r5, sp, #28
 800352e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003534:	4621      	mov	r1, r4
 8003536:	a807      	add	r0, sp, #28
 8003538:	f7fe fcd2 	bl	8001ee0 <osThreadCreate>
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <main+0x1d4>)
 800353e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003540:	f7fe fcc9 	bl	8001ed6 <osKernelStart>
 8003544:	e7fe      	b.n	8003544 <main+0x194>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	48000400 	.word	0x48000400
 8003550:	10210000 	.word	0x10210000
 8003554:	48000800 	.word	0x48000800
 8003558:	48000c00 	.word	0x48000c00
 800355c:	2000117c 	.word	0x2000117c
 8003560:	40004400 	.word	0x40004400
 8003564:	20001178 	.word	0x20001178
 8003568:	08003836 	.word	0x08003836
 800356c:	08003229 	.word	0x08003229
 8003570:	0800380c 	.word	0x0800380c
 8003574:	08003841 	.word	0x08003841
 8003578:	08003241 	.word	0x08003241
 800357c:	0800384f 	.word	0x0800384f
 8003580:	080032a5 	.word	0x080032a5
 8003584:	20001174 	.word	0x20001174

08003588 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003588:	6802      	ldr	r2, [r0, #0]
 800358a:	4b03      	ldr	r3, [pc, #12]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d101      	bne.n	8003594 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003590:	f7fc bfb8 	b.w	8000504 <HAL_IncTick>
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40001000 	.word	0x40001000

0800359c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_MspInit+0x88>)
{
 800359e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	661a      	str	r2, [r3, #96]	; 0x60
 80035a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035aa:	f002 0201 	and.w	r2, r2, #1
 80035ae:	9200      	str	r2, [sp, #0]
 80035b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035b8:	659a      	str	r2, [r3, #88]	; 0x58
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c2:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c6:	f7fc ffab 	bl	8000520 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	4611      	mov	r1, r2
 80035ce:	f06f 000b 	mvn.w	r0, #11
 80035d2:	f7fc ffb7 	bl	8000544 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	4611      	mov	r1, r2
 80035da:	f06f 000a 	mvn.w	r0, #10
 80035de:	f7fc ffb1 	bl	8000544 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	4611      	mov	r1, r2
 80035e6:	f06f 0009 	mvn.w	r0, #9
 80035ea:	f7fc ffab 	bl	8000544 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	4611      	mov	r1, r2
 80035f2:	f06f 0004 	mvn.w	r0, #4
 80035f6:	f7fc ffa5 	bl	8000544 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	4611      	mov	r1, r2
 80035fe:	f06f 0003 	mvn.w	r0, #3
 8003602:	f7fc ff9f 	bl	8000544 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003606:	2200      	movs	r2, #0
 8003608:	210f      	movs	r1, #15
 800360a:	f06f 0001 	mvn.w	r0, #1
 800360e:	f7fc ff99 	bl	8000544 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003612:	2200      	movs	r2, #0
 8003614:	210f      	movs	r1, #15
 8003616:	f04f 30ff 	mov.w	r0, #4294967295
 800361a:	f7fc ff93 	bl	8000544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	b003      	add	sp, #12
 8003620:	f85d fb04 	ldr.w	pc, [sp], #4
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800362a:	6802      	ldr	r2, [r0, #0]
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_UART_MspInit+0x44>)
 800362e:	429a      	cmp	r2, r3
 8003630:	d119      	bne.n	8003666 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003632:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8003638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800363a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800363e:	659a      	str	r2, [r3, #88]	; 0x58
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 800364a:	230c      	movs	r3, #12
 800364c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800365e:	2307      	movs	r3, #7
 8003660:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003662:	f7fc ffd1 	bl	8000608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003666:	b007      	add	sp, #28
 8003668:	f85d fb04 	ldr.w	pc, [sp], #4
 800366c:	40004400 	.word	0x40004400

08003670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003672:	4601      	mov	r1, r0
{
 8003674:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003676:	2200      	movs	r2, #0
 8003678:	2036      	movs	r0, #54	; 0x36
 800367a:	f7fc ff63 	bl	8000544 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800367e:	2036      	movs	r0, #54	; 0x36
 8003680:	f7fc ff94 	bl	80005ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003686:	4c15      	ldr	r4, [pc, #84]	; (80036dc <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003688:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800368a:	f042 0210 	orr.w	r2, r2, #16
 800368e:	659a      	str	r2, [r3, #88]	; 0x58
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003698:	a901      	add	r1, sp, #4
 800369a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800369c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800369e:	f7fd fc8d 	bl	8000fbc <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036a2:	f7fd fc6b 	bl	8000f7c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_InitTick+0x70>)
 80036a8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80036aa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80036ae:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_InitTick+0x74>)
 80036b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80036b6:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80036b8:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80036ba:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80036bc:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80036be:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c0:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80036c2:	f7fe f8a5 	bl	8001810 <HAL_TIM_Base_Init>
 80036c6:	b920      	cbnz	r0, 80036d2 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7fd ff8a 	bl	80015e2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80036ce:	b008      	add	sp, #32
 80036d0:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
 80036d4:	e7fb      	b.n	80036ce <HAL_InitTick+0x5e>
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000
 80036dc:	200011f4 	.word	0x200011f4
 80036e0:	40001000 	.word	0x40001000
 80036e4:	000f4240 	.word	0x000f4240

080036e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80036e8:	f7fe bc1a 	b.w	8001f20 <osSystickHandler>

080036ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036ec:	4801      	ldr	r0, [pc, #4]	; (80036f4 <TIM6_DAC_IRQHandler+0x8>)
 80036ee:	f7fd bf87 	b.w	8001600 <HAL_TIM_IRQHandler>
 80036f2:	bf00      	nop
 80036f4:	200011f4 	.word	0x200011f4

080036f8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036f8:	490f      	ldr	r1, [pc, #60]	; (8003738 <SystemInit+0x40>)
 80036fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80036fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <SystemInit+0x44>)
 8003708:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800370a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003712:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800371a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800371e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003724:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800372c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800372e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003734:	608b      	str	r3, [r1, #8]
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00
 800373c:	40021000 	.word	0x40021000

08003740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003778 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003744:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003746:	e003      	b.n	8003750 <LoopCopyDataInit>

08003748 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800374a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800374c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800374e:	3104      	adds	r1, #4

08003750 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003750:	480b      	ldr	r0, [pc, #44]	; (8003780 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003754:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003756:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003758:	d3f6      	bcc.n	8003748 <CopyDataInit>
	ldr	r2, =_sbss
 800375a:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <LoopForever+0x12>)
	b	LoopFillZerobss
 800375c:	e002      	b.n	8003764 <LoopFillZerobss>

0800375e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800375e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003760:	f842 3b04 	str.w	r3, [r2], #4

08003764 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <LoopForever+0x16>)
	cmp	r2, r3
 8003766:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003768:	d3f9      	bcc.n	800375e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800376a:	f7ff ffc5 	bl	80036f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800376e:	f000 f811 	bl	8003794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003772:	f7ff fe1d 	bl	80033b0 <main>

08003776 <LoopForever>:

LoopForever:
    b LoopForever
 8003776:	e7fe      	b.n	8003776 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003778:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800377c:	080038e8 	.word	0x080038e8
	ldr	r0, =_sdata
 8003780:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003784:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8003788:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800378c:	20001234 	.word	0x20001234

08003790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003790:	e7fe      	b.n	8003790 <ADC1_2_IRQHandler>
	...

08003794 <__libc_init_array>:
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	4e0d      	ldr	r6, [pc, #52]	; (80037cc <__libc_init_array+0x38>)
 8003798:	4c0d      	ldr	r4, [pc, #52]	; (80037d0 <__libc_init_array+0x3c>)
 800379a:	1ba4      	subs	r4, r4, r6
 800379c:	10a4      	asrs	r4, r4, #2
 800379e:	2500      	movs	r5, #0
 80037a0:	42a5      	cmp	r5, r4
 80037a2:	d109      	bne.n	80037b8 <__libc_init_array+0x24>
 80037a4:	4e0b      	ldr	r6, [pc, #44]	; (80037d4 <__libc_init_array+0x40>)
 80037a6:	4c0c      	ldr	r4, [pc, #48]	; (80037d8 <__libc_init_array+0x44>)
 80037a8:	f000 f824 	bl	80037f4 <_init>
 80037ac:	1ba4      	subs	r4, r4, r6
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	2500      	movs	r5, #0
 80037b2:	42a5      	cmp	r5, r4
 80037b4:	d105      	bne.n	80037c2 <__libc_init_array+0x2e>
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037bc:	4798      	blx	r3
 80037be:	3501      	adds	r5, #1
 80037c0:	e7ee      	b.n	80037a0 <__libc_init_array+0xc>
 80037c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037c6:	4798      	blx	r3
 80037c8:	3501      	adds	r5, #1
 80037ca:	e7f2      	b.n	80037b2 <__libc_init_array+0x1e>
 80037cc:	080038e0 	.word	0x080038e0
 80037d0:	080038e0 	.word	0x080038e0
 80037d4:	080038e0 	.word	0x080038e0
 80037d8:	080038e4 	.word	0x080038e4

080037dc <memcpy>:
 80037dc:	b510      	push	{r4, lr}
 80037de:	1e43      	subs	r3, r0, #1
 80037e0:	440a      	add	r2, r1
 80037e2:	4291      	cmp	r1, r2
 80037e4:	d100      	bne.n	80037e8 <memcpy+0xc>
 80037e6:	bd10      	pop	{r4, pc}
 80037e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f0:	e7f7      	b.n	80037e2 <memcpy+0x6>
	...

080037f4 <_init>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr

08003800 <_fini>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	bf00      	nop
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr
